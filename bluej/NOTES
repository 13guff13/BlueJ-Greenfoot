Issues:

  * How do we deal with a case like:
      someMethod().doSomething()
    if someMethod returns a object of class A and A isn't referenced anywhere
    else in the code. Is this a "reference" to the class or not?
    The reason this matters is because here the name "A" never appears in the
    code.
	=> this is an implicit dependency between the class and A, and an arrow
	   should be added by the dependency generator
	---> done

	
  * What about arrays in method calls.
    e.g.
      main(String[] args)
    it would be nice to be able to type into the dialog box:
      main({}) or main({ "arg1", "arg2" })
    and have the right thing happen. This isn't standard Java syntax, though, as
    array values can only be used for initialisation.
    It's unfortunate that "main" is so widely used.
	=> do initilisation for each argument


  * Reflection interface won't get around type safety, so it isn't
    sufficiently powerful to implement the object inspector - need to
    instrument classes at load time. All classes now implement a new
    interface that contains a method to populate the object inspector
    window.
	---> underway

Technology:

  * Use JOIE: http://www.cs.duke.edu/ari/joie,
              ftp://ftp.cs.duke.edu/pub/gac/joie
	---> integrated

  * Also depend on:
	- Sun's javac;
		---> integrated

	- jCVS (eventually),
		---> underway (status unknown)

	- installshield to build the installation package
		---> using evaluation version, will hopefully change soon.

Random musings:

	* comments need to be stored with (at least);
		- identifier that is represented (class, field name, method signature)
		- full text of comment, with HTML tags stripped
		- any parsed bits (author, cross-refs, ??)
		

Things that came up at Sun:

	* Feature Request: more information about execution
