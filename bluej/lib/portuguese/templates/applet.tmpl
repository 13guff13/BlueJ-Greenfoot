$PKGLINE
import java.applet.Applet;
import java.awt.*;

/**
 * Escreva uma descrição para a classe applet $CLASSNAME aqui.
 *
 * @author (seu nome) 
 * @version (número da versão ou data)
 */
public class $CLASSNAME extends Applet
{
	// variaveis de instância - substitua o exemplo abaixo pelo seu código
	private int x;

	/**
	 * Chamado pelo browser ou appletviewer para informar a este Applet que ele
	 * foi carregado no sistema. Este método é sempre chamado antes da primeira
	 * chamada ao método start.
	 */
	public void init()
	{
		// forneça qualquer inicialização necessária ao applet aqui

	}

	/**
	 * Chamado pelo browser ou appletviewer para informar ao Applet que
	 * ele deve iniciar sua execução. Ele é chamado após o método init
	 * a cada vez que a página do Applet é revisitada. 
	 */
	public void start()
	{
		// forneça o código a ser executado cada vez
		// que a página for revisitada

	}


	/**
	 * Este deve ser o método mais importante do seu applet. Aqui, o
	 * desenho do applet acontece. "paint" é chamado cada vez que o 
	 * applet deva ser desenhado na tela. Assim, ponha aqui código que
	 * exiba o applet.
	 *
	 * @param  g   o objeto Graphics deste applet.
	 */
	public void paint(Graphics g)
	{
		// texto simples a ser exibido pelo applet
		g.setColor(Color.white);
		g.fillRect(0, 0, 200, 100);
		g.setColor(Color.black);
		g.drawString("Applet exemplo", 20, 20);
		g.setColor(Color.blue);
		g.drawString("criado pelo BlueJ", 20, 40);
	}


	/** 
	 * Chamado pelo browser ou appletviewer para informar ao Applet que
	 * ele deve parar sua execução. Ele é chamado quando a página web que
	 * contém o Applet tem que ser substituída por outra página, e também
	 * imediatamente antes do Applet ser destruído.
	 */
	public void stop()
	{
		// forneça o código a ser executado quando
		// a página tiver que ser substituída ou o Applet destruído 
	}


	/**
	 * Chamado pelo browser ou appletviewer para informar a este Applet que
	 * sua área de memória está sendo desapropriada e que ele deve liberar os recursos
	 * que foram alocados. O método stop sempre será chamado antes de destroy. 
	 * Se você não tem nenhum recurso que precise ser liberado pode remover este método.
	 */
	public void destroy()
	{
		// forneça o código a ser executado quando o Applet tiver que ser destruído.
	}


	/**
	 * Retorna uma informação sobre este applet. 
	 * Um applet deve sobrescrever este método para retornar um String contendo
	 * informação sobre o autor, versão e copyright do Applet.
	 *
	 * @return uma representação String das informações do Applet
	 */
	public String getAppletInfo()
	{
		// substitua pela sua própria informação
		return "Título: BlueJ Applet Demo\n" + 
			   "Autor: Bruce Quig\n" +
			   "Um applet simples que imprime strings.";
	}


	/**
	 * Retorna informações de parâmetros deste Applet. 
	 * Retorna informações sobre os parâmetros que são reconhecidos pelo Applet.
	 * Um Applet deve sobrescerver este método para retornar um arranjo de Strings 
	 * que descreva estes parâmetros. 
	 * Cada elemento do arranjo deve ser um conjunto de três informações que contenham
	 * o nome, o tipo e uma descrição.
	 *
	 * @return um String[] representação das informações dos parâmetros deste Applet
	 */
	public String[][] getParameterInfo()
	{
		// provide parameter information about the applet
		String paramInfo[][] = {
			 {"firstParameter", "1-10", "description of first parameter"},
			 {"secondParameter", "boolean", "description of second parameter"}
		};
		return paramInfo;
	}
}
