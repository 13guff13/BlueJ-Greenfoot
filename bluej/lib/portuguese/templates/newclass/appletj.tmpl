$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Classe $CLASSNAME - escreva uma descriзгo da classe aqui!
 * 
 * @author  
 * @version 
 */
public class $CLASSNAME extends JApplet
{
	// variaveis de instвncia - substitua o exemplo abaixo pelo seu cуdigo
	private int x;

	 /**
	 * Chamado pelo browser ou appletviewer para informar a este JApplet que ele
	 * foi carregado no sistema. Este mйtodo й sempre chamado antes da primeira
	 * chamada ao mйtodo start.
	 */
	public void init()
	{
		// isto й uma precauзгo para evitar conflitos de seguranзa com os browsers atuais
		// incluindo o Netscape e o Internet Explorer que nгo permitem o acesso a
		// fila de eventos do sistema AWT que JApplets fazem no startup para checar acessos. 
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// forneзa uma inicializaзгo adequada para o seu JApplet

	}

	/**
	 * Chamado pelo browser ou appletviewer para informar ao JApplet que
	 * ele deve iniciar sua execuзгo. Ele й chamado apуs o mйtodo init
	 * a cada vez que a pбgina do JApplet й revisitada. 
	 */
	public void start()
	{
		// forneзa o cуdigo a ser executado cada vez
		// que a pбgina for revisitada

	}

	/** 
	 * Chamado pelo browser ou appletviewer para informar ao JApplet que
	 * ele deve parar sua execuзгo. Ele й chamado quando a pбgina web que
	 * contйm o JApplet tem que ser substituнda por outra pбgina, e tambйm
	 * imediatamente antes do JApplet ser destruнdo.
	 */
	public void stop()
	{
		// forneзa o cуdigo a ser executado quando
		// a pбgina tiver que ser substituнda ou o JAPplet destruнdo
	
	}

	/**
	 * Chamado pelo browser ou appletviewer para informar a este JApplet que
	 * sua бrea de memуria estб sendo desapropriada e que ele deve liberar os recursos
	 * que foram alocados. O mйtodo stop sempre serб chamado antes de destroy.
	 */
	public void destroy()
	{
		// forneзa o cуdigo a ser executado quando o JApplet tiver que ser destruнdo.
	
	}


	/**
	 * Retorna uma informaзгo sobre este applet. 
	 * Um applet deve sobrescrever este mйtodo para retornar um String contendo
	 * informaзгo sobre o autor, versгo e copyright do JApplet.
	 *
	 * @return uma representaзгo String das informaзхes do JApplet
	 */
	public String getAppletInfo()
	{
		// forneзa informaзхes sobre o applet
		return "Titulo:   \nAutor:   \nUm exemplo simples de descriзгo de um applet. ";
	}


	/**
	 * Retorna informaзхes de parвmetros deste JApplet. 
	 * Retorna informaзхes sobre os parвmetros que sгo reconhecidos pelo JApplet.
	 * Um JApplet deve sobrescerver este mйtodo para retornar um arranjo de Strings 
	 * que descreva estes parвmetros. 
	 * Cada elemento do arranjo deve ser um conjunto de trкs informaзхes que contenham
	 * o nome, o tipo e uma descriзгo.
	 *
	 * @return um String[] representaзгo das informaзхes dos parвmetros deste JApplet
	 */
	public String[][] getParameterInfo()
	{
		// forneзa o arranjo de informaзхes de parвmetros deste applet
		String paramInfo[][] = {
				 {"primeiroParametro",	"1-10",	"descriзгo do primeiro parвmetro"},
				 {"status", "boolean", "descriзгo do segundo parвmetro"},
				 {"imagens",   "url",	 "descriзгo do terceiro parвmetro"}
		};
		return paramInfo;
	}

	/**
	 * Mйtodo paint do JApplet.
	 * 
	 * @param  g   o objeto Graphics deste applet.
	 */
	public void paint(Graphics g)
	{
		// texto simples exibido pelo JApplet
		g.drawString("JApplet de exemplo", 20, 20);
	}


	/**
	 * Um exemplo de mйtodo - substitua este comentбrio pelo seu prуprio
	 * 	
	 * @param  y   um parвmetro do mйtodo
	 * @return	 a soma de x com y 
	 */
	public int sampleMethod(int y)
	{
		// ponha seu cуdigo aqui
		return x + y;
	}
}
