$PKGLINE
import java.applet.Applet;
import java.awt.*;

/**
 * 추상클래스 $CLASSNAME - 여기에 클래스 설명을 작성하십시오.
 *
 * @author (작성자 이름) 
 * @version (버전 번호나 날짜)
 */
public class $CLASSNAME extends Applet
{
	// 인스턴스 변수 - 다음의 예제를 사용자에 맞게 바꾸십시오
	private int x;

	/**
	 * 이 메소드는 브라우저나 애플릿 뷰어에 의해서 호출되어, 이 애플릿이 시스템에 
	 * 로드되어 졌음을 알려줍니다. start 메소드가 처음 호출되어지기 전에 항상 
	 * init메소드가 호출되어집니다. 
	 */
	public void init()
	{
		// 작성자의 애플릿에 꼭 필요한 어떤 초기화하기 위한 코드를 추가합니다.

	}

	/**
	 * 이 메소드는 브라우저나 애플릿 뷰어에 의해서 호출되어, 이 애플릿이 실행을
	 * 시작하여야 함을 알려줍니다. 이 메소드는 init메소드나 애플릿이 웹패이지에 
	 * 다시 접속할때마다 호출됩니다.
	 */
	public void start()
	{
		// 웹페이지가 접속될 때마다 실행이 되어야할 코드를 추가합니다.

	}


	/**
	 * paint메소드는 아마도 사용자의 애플릿에서 가장 중요한 메소드일 것입니다: 
	 * 여기, 애플릿이 그려지는 작업이 실행됩니다. 애플릿이 스크린에 그려져야 할 때마다 
	 * "paint"메소드가 호출됩니다. 따라서, 애플릿에 보여줄 내용을 코딩하십시오.
	 *
	 * @param  g   이 애플릿을 위한 그래픽 객체 
	 */
	public void paint(Graphics g)
	{
		// 애플릿에 출력된 간단한 텍스트
		g.setColor(Color.white);
		g.fillRect(0, 0, 200, 100);
		g.setColor(Color.black);
		g.drawString("Sample Applet", 20, 20);
		g.setColor(Color.blue);
		g.drawString("created by BlueJ", 20, 40);
	}


	/** 
	 * 이 메소드는 브라우저나 애플릿 뷰어에 의해서 호출되어, 이 애플릿이 실행을 
	 * 정지하여야 함을 알려줍니다. 그것은 이 애플릿을 포함하고 있는 웹페이지가 
	 * 다른 페이지에 의해 바뀌거나, 애플릿이 사라지기 바로전에 호출됩니다. 만약 
	 * 정지하고자 하는 스레드와 같은 해제할 리소스가 없다면 이메소드를 지울 수 
	 * 있습니다.
	 */

	public void stop()
	{
		// 어떤 페이지가 다른 페이지로 바뀌어야 할 경우, 또는 애플릿이 종료되기 전에 
		// 실행할 필요가 있는 코드를 stop메소드에 추가합니다.
	}


	/**
	 * 이 메소드는 브라우저나 애플릿 뷰어에 의해서 호출되어, 이 애플릿이 교정되고 있고,
	 * 할당되어 있는 리소스가 해제되어야 함을 알려줍니다. stop메소드는 해제되기 전에 
	 * 항상 호출될 것입니다. 만약 해제하고자 하는 리소스가 없는 경우 이 메소드를 지울 
	 * 수 있습니다.
	 * 
	 */

	public void destroy()
	{
		// 애플릿이 종료되는 순간에 실행되는 코드를 추가합니다.
	}


	/**
	 * 이 애플릿에 대한 정보를 반환합니다. 애플릿의 제작자, 버전 그리고 저자권에 대한 
	 * 정보를 포함하는 문자열을 반환하도록 오버라이딩 되어야 합니다.
	 *
	 * @return 이 애플릿에 대한 정보를 표현한 문자열
	 */
	public String getAppletInfo()
	{
		// 사용자의 정보로 변경합니다.
		return "Title: BlueJ Applet Demo\n" + 
			   "Author: Bruce Quig\n" +
			   "A simple applet that draws two strings.";
	}


	/** 
	* 이 애플릿에대해 이해가 된 매개변수의 정보를 반환합니다. 매개변수 
	* 각각에 대한 세부사항을 제공하기 위해 String형 배열을 반환해야 합니다. 각 배열의 
	* 요소는 이름과 타입, 그리고 설명과 같은 3개의 문자열이 포함되어야 한다. 
	* 
	* @return String[][] 이 애플릿에 대한 매개변수를 표현한 정보 
	*/ 

	public String[][] getParameterInfo()
	{
		// 애플릿에 대한 매개변수 정보를 추가한다.
		String paramInfo[][] = {
			 {"firstParameter", "1-10", "description of first parameter"},
			 {"secondParameter", "boolean", "description of second parameter"}
		};
		return paramInfo;
	}
}
