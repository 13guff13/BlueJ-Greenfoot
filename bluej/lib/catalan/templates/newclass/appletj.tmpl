$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Class $CLASSNAME - Escriviu aquí una descripció de la classe
 * 
 * @author (your name) 
 * @version (a version number)
 */
public class $CLASSNAME extends JApplet
{
	// instance variables - Reemplaceu l'exemple següent per les vostres variables
	private int x;

	 /**
	 * Aquest mètode el demana el navegador o el visualitzador d'applets per informar
	 * aquest JApplet que ja ha estat carregat en el sistema. El demanen just abans
	 * que es demani el mètode start per primera vegada.
	 */

	public void init()
	{
		// Això és per un conflicte de seguretat amb els navegadors actuals
		// incloent el Netscape i el Internet Explorer, que no permeten accedir al 
		// sistema de cues d’AWT que fan els JApplets a l’inici per comprovar l’accés 
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// Inclou qualsevol inicialització necessària pel vostre JApplet

	}

	/**
	 * Aquest mètode el demana el navegador o el visualitzador d'applets per informar
	 * aquest JApplet que ha de començar a executar-se. El demanen just després
	 * del mètode init i cada vegada que hom torna a visitar la pàgina web on hi
	 * ha el JApplet
	 */
	public void start()
	{
		// Inclou qualsevol codi que sigui necessari executar cada vegada 
		// que sigui visitada la pàgina web
		
	}

	/** 
	 * Aquest mètode el demana el navegador o el visualitzador d'applets per informar
	 * aquest JApplet que ha d’aturar la seva execució. Es crida quan la pàgina web
	 * que conté el JApplet ha estat reemplaçada per una altra pàgina, i també 
	 * immediatament abans que el JApplet sigui destruït. 
	 */
	public void stop()
	{
		// Inclou qualsevol codi que sigui necessari executar quan la pàgina sigui
		// reemplaçada per una altra o immediatament abans que el JApplet sigui destruït.
	
	}

	/**
	 * Paint method for applet.
	 * 
	 * @param  g   the Graphics object for this applet
	 */
	public void paint(Graphics g)
	{
		// simple text displayed on applet
		g.setColor(Color.white);
		g.fillRect(0, 0, 200, 100);
		g.setColor(Color.black);
		g.drawString("Sample Applet", 20, 20);
		g.setColor(Color.blue);
		g.drawString("created by BlueJ", 20, 40);
	}

	/**
	 * Aquest mètode el demana el navegador o el visualitzador d'applets per informar
	 * aquest JApplet que ha estat cridat i que ha de destruir tots els recursos que 
	 * hagi creat. El mètode ‘stop’ es crida sempre abans de ser destruït. 
	 */
	public void destroy()
	{
		// Inclou qualsevol codi que sigui necessari executar abans  
		// que el JApplet sigui destruït.
	
	}


	/**
	 * Retorna informació sobre aquest applet.
	 * Un applet ha de sobreescriure aquest mètode per retornar una cadena que contingui
	 * informació sobre l’autor, la versió i el copyright d’aquest JApplet.
	 * 
	 *  @return informació sobre aquest JApplet en format String 

	 */
	public String getAppletInfo()
	{
		// Inclou informació sobre aquest applet
		return "Títol:   \nAutor:   \nA descripció d’exemple sobre aquest applet. ";

	}


	/**
	 * Retorna informació sobre els paràmetres d’aquest JApplet.
	 * Retorna informació sobre els paràmetres que són entesos per aquest JApplet. 
	 * Un applet ha de sobreescriure aquest mètode per retornar una matriu de cadenes
	 * descrivint aquests paràmetres.
	 * Cada element de la matriu ha d'estar format per tres cadenes amb
	 * el nom, el tipus i una descripció.
	 * 
	 * @return un String[] amb informació sobre els paràmetres d’aquest JApplet

	 */
	public String[][] getParameterInfo()
	{
		// Inclou informació sobre els paràmetres d’aquest JApplet
		String paramInfo[][] = {
				 {"firstParameter",	"1-10",	"descripció del primer paràmetre"},
				 {"status", "boolean", "descripció del segun paràmetre"},
				 {"images",   "url",	 "descripció del tercer paràmetre"}
		};
		return paramInfo;
	}
}
