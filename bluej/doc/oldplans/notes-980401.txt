Demo date: July / early August, in US, West Coast

== Key ==

! - done
# - ??
* - ??

== Requirements ==

Essential:
#!* graphical display (package)

#!* compilation

!* execution
	passing parameters

!* editing


Very desirable:
	# editor <-> compiler communication
	compile from editor
	error message display

* compiler <-> package communication -> source
	# status: idle, waiting for compile, actually compiling
	general user interface niceness
	! error message display

* dependencies
	# display
	generate / infer
	# comment rather than using arrows directly?

* use libraries + display


Desirable:
* some basic debugging (breakpoints, stepping) -- not really high priority?


Optional:
* Library browser

* Full debugging

* Group work

* Internationalisation


== Technologies ==

* Source -> bytecode compiler (Pizza?, javac?, antlr?, own?) -- need source so
dependencies can be generated, etc.
	# -- look into getting Sun's javac - worry about licensing, etc.
	# -- need it sooner rather than later.

* VM (Eliot Moss?, Sun VM?, OS VM?, own?) -- need source?
	distribution


== Design choices ==

#* implementation language (C++?, Java?) -- probably Java

#* decide on a subset of Blue functionality for the demo in July/August (see
above)


== Redesign issues ==

* static methods
	-- in popup menu on class only (i.e. not on objects)

* static fields
	-- show in separate list in inspect object

#* interfaces (how we deal with them)
#	-- no big deal

* inherited routines in menu
	-- show inherited object routines in submenu
	-- user preferences to choose an interaction style
	-- grey out menu items that are not applicable (e.g. creation routines
for abstract classes or interfaces)
	 * routines in popup should be in same order as in "package view".

* views of a class:
	public			\
				 - == "client view"
	package protected	/
	protected 		== "inheritance view"
	private			\
				 - == "implementation view" == "source"?
	implementationn		/

	note: "package view" and "inheritance view" only show methods and
	routines and also show all inherited methods and routines.

	note: "client view" might be context sensitive and only display
	public members when imported into another package?

* multiple constructors
	-- as for overloading

* overloading (i.e. multiple methods with the same name)
	-- show with signature AND parameter names

* class drawing:
	in Blue: blue (normal), green (enum), red (library)
	+ patterns: 50% (abstract), striped (uncompiled)
	+ icons for groupwork

#	in Blue/Java: similar
#		blue (normal) 	-> light (abstract) -> uncompiled  -> compiling
# 		red (library) 	-> light (abstract) -> " (unusual) -> " (same)
#		? (interface) 	-> N/A 		    -> "           -> " (same)
#		? package 	-> N/A 		    -> "           -> " (same)

* dependency drawing
	-- implementation arrows same colour as interfaces (possibly darker
shade)

* identity of objects
	-- have hashtable of objects for object bench
	-- have hashtable for open inspect windows
	-- do the right thing if the same object is added to workbench /
inspected
	-- add names of objects in workbench to inspect window

*(opt)	view object as class - advanced option (shift right-click?)
	-- select class, then shift-click to view as object - only see that
	class's interface

* generating dependencies
	-- on "save" of a source file, get the compiler to do a parse and get
	the dependencies from there somehow
	-- if the parse fails, indicate it in the interface with a broken
	"uses arrows" to mean there is some reference to the class in this arrow.
	-- drawing a uses arrow by hand puts an import statement into the
source, even for classes within the package
