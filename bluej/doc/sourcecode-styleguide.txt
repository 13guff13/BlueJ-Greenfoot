SOURCE CODE STYLE GUIDE FOR BLUEJ

1. Naming

1.1 Use meaningful names.

Use descriptive names for all identifiers (names of classes, variables and methods). Avoid ambiguity. Avoid abbreviations. Simple mutator methods should be named setSomething(...). Simple accessor methods should be named getSomething(...). Accessor methods with boolean return values are often called isSomething(...), for example, isEmpty().

1.2 Class names start with a capital letter.

1.3 Class names are singular nouns.

1.4 Method and variable names start with lowercase letters.

    All three - class, method and variable names - use capital letters in the middle to increase readability of compound identifiers, e.g. numberOfItems.

1.5 Constants are written in UPPERCASE.

    Constants occasionally use underscores to indicate compound identifiers: MAXIMUM_SIZE

2. Layout

2.1 One level of indentation is four spaces. Tab characters ("hard" tabs) are not used.

2.2 All statements within a block are indented one level.

2.3 Braces for classes, methods, if statements, loops, sychronized blocks etc are alone on one line.

    The braces for blocks are on separate lines and are at the same indentation level, for example:

    public int getAge()
    {
        while (true)
        {
            if (false)
            {
                try
                {

                }
                catch (Exception e)
                {

                }
                finally
                {

                }
            }
            else
            {

            }
        }
    }

2.4 For lambdas, which are often inside expressions, use your best judgement.

2.5 Always use braces in control structures.

    Braces are used in if-statements and loops even if the body is only a single statement.

2.6 Use a space between the keyword and a control structure's condition, e.g. "if (true)".

2.7 Use a space around operators.
    eg: 4 * 5

2.8 Use a blank line between methods (and constructors).

    Use blank lines to separate logical blocks of code. This means at least between methods, but also between logical parts within a method.

3. Documentation

3.1 Every class has a license comment and a class comment at the top.

	The copyright statement in the license comment should list years during which the file
	was modified.

    The class comment contains at least
    - a general description of the class

3.2 Every method has a method comment.

3.3 Comments are Javadoc-readable.

    Class and method comments must be recognised by Javadoc. In other words: they should start with the comment symbol /**.

3.4 Code comments (only) where necessary.

    Comments in the code should be included where the code is not obvious or difficult to understand (while preference should be given to make the code obvious or easy to understand where possible), and where it helps understanding of a method.

4. Language use restrictions

4.1 Order of declarations: fields, constructors, methods.

    The elements of a class definition appear (if present) in the following order: package statement; import statements; class comment; class header; field definitions; constructors; methods.

4.2 Fields may not be public (except for final fields).

4.3 Always use an access modifier.

    Specify all fields and methods as either private, public, or protected. Never use default (package private) access.

4.4 Import classes separately.

    Import statements explicitly naming every class are preferred over importing whole packages. E.g.

        import java.util.ArrayList;
        import java.util.HashSet;

    is better than

        import java.util.*;

    However if four classes are imported from a package, the import can be changed to 'package.*'.
    This can be configured in some IDE's. In Eclipse: Window/Preferences/Java/Organize Imports
 
4.5 Always include a constructor (even if the body is empty).

4.6 Always include superclass constructor call.

    In constructors of subclasses, do not rely on automatic insertion of a superclass call. Include the super(...) call explicitly, even if it would work without it.

4.7 Initialise all fields in the constructor or by direct initialisation.

5. Edits and commits

5.1 Separate out each logical change into a different commit.  A bug fix should be separate to code clean-up, whenever possible.

5.2 Do not edit more code than is necessary: do not clean up or change the style of code which you would otherwise not need to edit.
