<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej" default="ready-to-run">

    <!-- ************************************************************ -->
    <!-- set global properties for this build (and subproject builds} -->


    <!-- the build_java_home is used to find the compiler to fork and the
         tools.jar file to use with it. Note that in general all
         compilation should be done on the minimum supported JDK for
         BlueJ (which is currently 1.3) -->
    <property name="build_java_home" value="/usr/java/j2sdk1.4.1"/>

    <!-- the run_java_home is used to find the jvm to run and the
         corresponding tools.jar file -->
    <property name="run_java_home" value="/usr/java/j2sdk1.4.1"/>


    <!-- ********************************************** -->
    <!-- do not edit below here for local customisation -->

    <!-- Pass this property down to lower build files to find various jars etc -->
    <property name="bluej_home" value="${basedir}"/>

    <!-- Set up common directories -->
    <property name="src" value="src"/>
    <property name="build" value="classes"/>
    <property name="doc" value="doc/all"/>
    <property name="extdoc" value="doc/extensions"/>
    <property name="test.src" value="test/src"/>
    <property name="test.build" value="test/classes"/>
    <property name="test.report" value="test/report"/>

    <!-- Set up classpath (does not include jar files built by us) -->
    <path id="bluej.class.path">
        <pathelement location="${bluej_home}/lib/MRJToolkitStubs.zip"/>
	<pathelement location="${bluej_home}/lib/MRJ141Stubs.jar"/>
        <pathelement location="${bluej_home}/lib/antlr.jar"/>
        <pathelement location="${bluej_home}/lib/junit.jar"/>
        <!--pathelement location="${bluej_home}/lib/jcvsii.jar" /-->
    </path>

    <target name="prepare">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="parser">
        <!-- Generate the parser Java code - not a dependency of any other
             target. Must be explicitly specified on ant command line -->
        <antlr target="${src}/bluej/parser/java.g"/>
        <antlr target="${src}/bluej/parser/ast/java.g"/>
        <antlr target="${src}/bluej/parser/ast/unittest.tree.g"/>
    </target>

    <target name="compile" depends="prepare">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${src}"
                destdir="${build}"
                debug="on"
                deprecation="yes"
                excludes="de/**,
                            archiver/**, gnu/**, javax/**, kopi/**,
                            net/**/test/**,
                            net/**,
                            bluej/groupwork/**,
                            bluej/tester/**,
                            bluej/browser/**,
                            bluej/guibuilder/**,
                            bluej/editor/moe/Moe.java"
                >
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-test">
        <mkdir dir="${test.build}"/>
        <mkdir dir="${test.report}"/>
        <!-- Compile the java code from ${testsrc} into ${testbuild} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${test.src}"
                destdir="${test.build}"
                deprecation="yes"
                >
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${build}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="jarred" depends="compile">
        <!-- jar up all the classes -->
        <jar compress="no" jarfile="${bluej_home}/lib/bluej.jar">
            <fileset dir="${build}">
                <exclude name="bluej/extensions/**" />
            </fileset>
        </jar>

        <jar compress="no" jarfile="${bluej_home}/lib/bluejext.jar">
            <fileset dir="${build}">
                <include name="bluej/extensions/**" />
            </fileset>
        </jar>
    </target>

    <target name="ready-to-run" depends="jarred, inspector">
    </target>

    <target name="editor-dist">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="dist"/>
    </target>

    <target name="inspector">
        <ant antfile="inspector.xml" dir="inspector" target="compile-inspector">
            <reference refid="bluej.class.path"/>
        </ant>
    </target>

    <target name="run">
        <!-- Run the java code in ${build} -->
        <java classname="bluej.Main" fork="yes" jvm="${run_java_home}/bin/java">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${bluej_home}/lib/bluej.jar"/>
                <pathelement location="${bluej_home}/lib/bluejext.jar"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
            </classpath>
            <!-- <arg path="${bluej_home}/test-examples/dummy/bluej.pkg"/> -->
        </java>
    </target>

    <target name="dist" depends="editor-dist">
        <ant antfile="build.xml" dir="extensions" target="buildall"/>
        <ant antfile="package.xml" dir="package" target="dist"/>
        <ant antfile="package.xml" dir="package" target="windows-dist"/>
    </target>

    <target name="windows-dist">
        <ant antfile="package.xml" dir="package" target="windows-dist"/>
    </target>

    <target name="test" depends="compile,compile-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${bluej_home}/lib/bluej.jar"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="${test.build}"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${test.report}">
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc">
        <!-- Doc the java code from ${src} into ${doc} -->
        <mkdir dir="${doc}"/>
        <javadoc destdir="${doc}"
            packagenames="bluej.*, org.gjt.sp.jedit.syntax.*, javax.swing.beaninfo.*"
            excludepackagenames=
               "bluej.guibuilder.*,
                bluej.groupwork.*,
                bluej.browser.*"
            sourcepath="${src}"
            Windowtitle="BlueJ API"
            Doctitle="BlueJ API"
            bottom="&lt;a href=//www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">
            <classpath refid="bluej.class.path"/>
       </javadoc>
        <mkdir dir="${extdoc}"/>
        <javadoc destdir="${extdoc}"
            packagenames="bluej.extensions.event"
            sourcepath="${src}"

            Windowtitle="BlueJ Extensions API"
            Doctitle="BlueJ Extensions API"
            bottom="&lt;a href=http://www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">

            <fileset dir="src" defaultexcludes="yes">
              <include name="bluej/extensions/*.java" />
              <exclude name="bluej/extensions/ExtensionBridge.java"/>
            </fileset>
            <classpath refid="bluej.class.path"/>
       </javadoc>
    </target>

    <target name="clean">
        <!-- Delete the ${build} directory trees -->
        <delete quiet="true" dir="${build}/bluej"/>
        <delete quiet="true" dir="${build}/org"/>
        <delete quiet="true" dir="${build}/net"/>
        <delete quiet="true" file="${bluej_home}/lib/bluej.jar"/>
        <!-- Clean inspectors -->
        <ant antfile="inspector.xml" dir="inspector" target="clean-inspector"/>
    	<!-- Clean extensions -->
    	<ant antfile="build.xml" dir="extensions" target="cleanall"/>
    </target>

    <target name="editor-clean">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="clean"/>
    </target>
</project>
