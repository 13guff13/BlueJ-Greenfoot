<?xml version="1.0" encoding="UTF-8"?>
<project name="bluej" default="ready-to-run">

    <!-- ************************************************************ -->
    <!-- set global properties for this build (and subproject builds} -->

    <!-- ********************************************** -->
    <!-- it should not be necessary to edit any properties to build -->

    <!-- user specific properties that are edited to match local build environment-->
    <property file="build.properties"/>   
      
    <!-- Set up common directories -->
    <property name="core.doc" value="doc/all"/>
    <property name="extension.doc" value="doc/extensions"/>

    <property name="core.src" value="src"/>
    <property name="core.build" value="classes"/>
    <property name="boot.src" value="boot/src"/>
    <property name="boot.build" value="boot/classes"/>
    <property name="test.src" value="test/src"/>
    <property name="test.build" value="test/classes"/>
    <property name="test.report" value="test/report"/>

	<property name="boot.jar" value="${bluej_home}/lib/bluej.jar"/>
	<property name="core.jar" value="${bluej_home}/lib/bluejcore.jar"/>
	<property name="editor.jar" value="${bluej_home}/lib/bluejeditor.jar"/>
	<property name="extension.jar" value="${bluej_home}/lib/bluejext.jar"/>

    <!-- Set up classpath (does not include jar files built by us) -->
    <path id="bluej.class.path">
        <pathelement location="${bluej_home}/lib/MRJ141Stubs.jar"/>
        <pathelement location="${bluej_home}/lib/antlr.jar"/>
        <pathelement location="${bluej_home}/lib/junit.jar"/>
    </path>

    <!--
      -  Generate the parser Java code - not a dependency of any other
      -  target. Must be explicitly specified on ant command line
     -->
    <target name="parser">
        <antlr target="${core.src}/bluej/parser/java.g"/>
        
        <antlr target="${core.src}/bluej/parser/ast/java.g"
               outputdirectory="${core.src}/bluej/parser/ast/gen"/>
        <antlr target="${core.src}/bluej/parser/ast/unittest.tree.g"
               outputdirectory="${core.src}/bluej/parser/ast/gen"/>
    </target>

    <!--
      -  Compile the boot strap loader
     -->
    <target name="compile-boot">
        <mkdir dir="${boot.build}"/>
        <!-- Compile the java code from ${boot.src} into ${boot.build} -->
        <!-- Boot should not need any other jars or classes other than standard JDK -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${boot.src}"
                destdir="${boot.build}"
                deprecation="yes"
        >
        	<compilerarg line="-source 1.4"/>        	
        </javac>

    </target>

    <!--
      -  Compile the core classes (includes extension and editor classes)
     -->
    <target name="compile-core">
        <mkdir dir="${core.build}"/>
        <!-- Compile the java code from ${core.src} into ${core.build} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${core.src}"
                destdir="${core.build}"
                debug="on"
                deprecation="yes"
                excludes="de/**,
                    archiver/**, gnu/**, javax/**, kopi/**,
                    net/**/test/**,
                    net/**,
                    bluej/groupwork/**,
                    bluej/tester/**,
                    bluej/browser/**,
                    bluej/guibuilder/**,
                    bluej/editor/moe/Moe.java"> <!--,
             	       						bluej/debugger/jdi/JdiUtils15.java,
        	        						bluej/utility/JavaUtils15.java,
        	        						bluej/utility/JavaArrayReflective.java">-->
        	<compilerarg line="-source 1.4"/>
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-test" depends="compile-boot, compile-core">
        <mkdir dir="${test.build}"/>
        <mkdir dir="${test.report}"/>
        <!-- Compile the java code from ${test.src} into ${test.build} -->
        <javac
                executable="${build_java_home}/bin/javac"
                fork="yes"
                srcdir="${test.src}"
                destdir="${test.build}"
                deprecation="yes"
                >
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.build}"/>
                <pathelement location="${core.build}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="jar-boot" depends="compile-boot">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${boot.jar}"/>
        <!-- this is the Boot, the resulting jar is bluej.jar for historic reasons -->
        <jar compress="yes" jarfile="${boot.jar}">
            <fileset dir="${boot.build}">
                <include name="bluej/Boot*.class"/>
                <include name="bluej/Splash*.class"/>
                <include name="bluej/BlueJLabel.class"/>
                <include name="bluej/GreenfootLabel.class"/>
            </fileset>
            <fileset dir="${boot.src}">
            	<include name="bluej/splash.jpg"/>
            	<include name="bluej/greenfootsplash.jpg"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="bluej.Boot"/>
            </manifest>
        </jar>
    </target>

    <target name="jar-core" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${core.jar}"/>
        <jar compress="yes" jarfile="${core.jar}">
            <fileset dir="${core.build}">
                <exclude name="bluej/extensions/**" />
                <exclude name="bluej/editor/**" />
                <exclude name="org/**" />
            </fileset>
        </jar>
    </target>

    <target name="jar-editor" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${editor.jar}"/>
        <jar compress="yes" jarfile="${editor.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/editor/**" />
                <include name="org/**" />
                <exclude name="bluej/editor/*.txt" />
                <exclude name="bluej/editor/*.xml" />   
            </fileset>
        </jar>
    </target>

    <target name="jar-extension" depends="jar-boot, compile-core">
        <!-- delete the old jar first. To make sure it gets recreated -->
        <delete quiet="true" file="${extension.jar}"/>
        <jar compress="yes" jarfile="${extension.jar}">
            <fileset dir="${core.build}">
                <include name="bluej/extensions/**" />
            </fileset>
        </jar>
    </target>

    <target name="ready-to-run" depends="jar-core, jar-editor, jar-extension">
    </target>

    <target name="run">
        <!-- run the java code built into the jar files -->
		<java classname="bluej.Boot" fork="yes" jvm="${run_java_home}/bin/java">        
			<classpath>
				<pathelement location="${boot.jar}"/>
                	<pathelement location="${build_java_home}/lib/tools.jar"/>
		        	<pathelement location="/System/Library/Java"/>
			</classpath>                	
        </java>
    </target>

    <target name="editor-dist">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="dist"/>
    </target>

    <target name="dist" depends="ready-to-run">
	    <echo message="Do you have the latest copy of the submitter extension in your lib/extensions directory??"/>
        <ant dir="package" target="dist"/>
        <ant dir="package" target="windows-dist"/>
    </target>
	
    <target name="dist-greenfoot" depends="ready-to-run">
	    <ant dir="package" antfile="greenfoot-build.xml" target="dist"/>
    </target>

    <target name="windows-dist">
        <ant dir="package" target="windows-dist"/>
    </target>

    <target name="test" depends="compile-core, compile-test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${core.jar}"/>
                <pathelement location="${extension.jar}"/>
                <pathelement location="${run_java_home}/lib/tools.jar"/>
                <pathelement location="${test.build}"/>
            </classpath>

            <formatter type="plain"/>

            <batchtest fork="yes" todir="${test.report}">
                <fileset dir="${test.src}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc-core">
        <!-- doc the java code from ${core.src} into ${core.doc} -->
        <mkdir dir="${core.doc}"/>
        <javadoc destdir="${core.doc}"
            packagenames="bluej.*, org.gjt.sp.jedit.syntax.*, javax.swing.beaninfo.*"
            excludepackagenames=
               "bluej.guibuilder.*,
                bluej.groupwork.*,
                bluej.browser.*"
            sourcepath="${core.src}"
            Windowtitle="BlueJ API"
            Doctitle="BlueJ API"
            bottom="&lt;a href=//www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="doc-extension">
        <mkdir dir="${extension.doc}"/>
        <javadoc destdir="${extension.doc}"
            packagenames="bluej.extensions.event"
            sourcepath="${core.src}"

            Windowtitle="BlueJ Extensions API"
            Doctitle="BlueJ Extensions API"
            bottom="&lt;a href=http://www.bluej.org/&gt;BlueJ homepage&lt;/a&gt;">

            <fileset dir="src" defaultexcludes="yes">
              <include name="bluej/extensions/*.java" />
              <exclude name="bluej/extensions/ExtensionBridge.java"/>
              <include name="bluej/extensions/editor/*.java"/>
              <exclude name="bluej/extensions/editor/EditorBridge.java"/>
            </fileset>
            <classpath>
                <path refid="bluej.class.path"/>
                <pathelement location="${boot.jar}"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="clean-boot">
        <delete quiet="true" dir="${boot.build}/bluej"/>
        <delete quiet="true" file="${boot.jar}"/>
    </target>

    <target name="clean-core">
        <delete quiet="true" dir="${core.build}/bluej"/>
        <delete quiet="true" dir="${core.build}/org"/>
        <delete quiet="true" dir="${core.build}/net"/>
        <delete quiet="true" file="${core.jar}"/>
        <delete quiet="true" file="${editor.jar}"/>
        <delete quiet="true" file="${extension.jar}"/>
    </target>

    <target name="clean" depends="clean-boot, clean-core">
    </target>

    <target name="editor-clean">
        <ant antfile="editor.xml" dir="src/bluej/editor" target="clean"/>
    </target>
</project>
