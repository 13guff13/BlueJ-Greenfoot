package bluej;

import java.awt.Frame;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.util.*;

/**
 * This class is the BlueJ boot loader. bluej.Boot is the class that should be 
 * started to execute BlueJ. No other external classpath settings are necessary. 
 *
 * This loader finds and loads the known BlueJ classes and sets up the classpath.
 * While doing this, it displays a splash screen.
 *
 * @author  Andrew Patterson
 * @author  Damiano Bolla
 * @author  Michael Kolling
 * @author  Bruce Quig
 * @version $Id: Boot.java 3628 2005-09-30 16:29:24Z polle $
 */
public class Boot
{
    public static final int BLUEJ_VERSION_MAJOR = 2;
    public static final int BLUEJ_VERSION_MINOR = 1;
    public static final int BLUEJ_VERSION_RELEASE = 0;
    public static final String BLUEJ_VERSION_SUFFIX = " (dev)";

    public static final int BLUEJ_VERSION_NUMBER = BLUEJ_VERSION_MAJOR * 1000 +
                                             BLUEJ_VERSION_MINOR * 100 +
                                             BLUEJ_VERSION_RELEASE;

    public static final String BLUEJ_VERSION = BLUEJ_VERSION_MAJOR
                                         + "." + BLUEJ_VERSION_MINOR
                                         + "." + BLUEJ_VERSION_RELEASE
                                         + BLUEJ_VERSION_SUFFIX;

    public static final String BLUEJ_VERSION_TITLE = "BlueJ " + BLUEJ_VERSION;
    
    public static String GREENFOOT_VERSION = " 0.2";

    
    // A singleton boot object so the rest of BlueJ can pick up args etc.
    private static Boot instance;
    
    // Number of jars generated by the BlueJ build process. These can
    // be ignored during development runs (they must be the first jar files 
    // listed in the following array).
    private static final int bluejBuildJars = 3;
    
    // The jar files we expect in the BlueJ lib directory
    // The first lot are the ones to run BlueJ itself
    private static String[] bluejJars = { "bluejcore.jar", "bluejeditor.jar", "bluejext.jar",
                                          "antlr.jar", "MRJ141Stubs.jar" };
    // The second group are available to user code (and to bluej)
    // bluejcore.jar is necessary as it contains the support runtime
    // (bluej.runtime.* classes).
    private static String[] bluejUserJars = { "bluejcore.jar", "junit.jar" };
    
    // In greenfoot we need access to the BlueJ classes.
    // When running from eclipse, the first jar files will be excluded as explained above at the bluejBuildJars field.
    private static String[] greenfootUserJars = {"bluejcore.jar", "bluejeditor.jar", "bluejext.jar","antlr.jar", "MRJ141Stubs.jar",
         "junit.jar" };
    
    private static boolean isGreenfoot = false;
    /**
     * Entry point for booting BlueJ
     *
     * @param  args  The command line arguments
     */
    public static void main(String[] args)
    {
        if((args.length >= 1) && "-version".equals(args[0])) {
            System.out.println("BlueJ version " + BLUEJ_VERSION
                               + " (Java version "
                               + System.getProperty("java.version")
                               + ")");
            System.out.println("--");

            System.out.println("virtual machine: "
                               + System.getProperty("java.vm.name")
                               + " "
                               + System.getProperty("java.vm.version")
                               + " ("
                               + System.getProperty("java.vm.vendor")
                               + ")");

            System.out.println("running on: "
                               + System.getProperty("os.name")
                               + " "
                               + System.getProperty("os.version")
                               + " ("
                               + System.getProperty("os.arch")
                               + ")");
            System.exit(-1);
        }

        Properties commandLineProps = processCommandLineProperties(args);
        isGreenfoot = commandLineProps.getProperty("greenfoot", "false").equals("true");
        
        SplashLabel image = null;
        if(isGreenfoot) {
            image = new GreenfootLabel();
            bluejUserJars = greenfootUserJars;
        } else {
            image = new BlueJLabel();
        }
        
        Frame splash = new SplashWindow(image);
        
        instance = new Boot(args, commandLineProps);
        instance.bootBluej();

        splash.dispose();
    }


    /**
     * Returns the singleton Boot instance, so the rest of BlueJ can find paths, args, etc.
     *
     * @return    the singleton Boot object instance
     */
    public static Boot getInstance()
    {
        return instance;
    }


    // ---- instance part ----
    private Properties commandLineProps; //Properties specified a the command line (-....)
    private String[] args;      // Command line arguments
    private File javaHomeDir;   // The value returned by System.getProperty
    private File bluejLibDir;   // Calculated below

    private ClassLoader bootLoader; // The loader this class is loaded with

    private URL[] runtimeUserClassPath; // The initial class path used to run code within BlueJ
    private URL[] runtimeClassPath;     // The class path containing all the BlueJ classes


    /**
     * Constructor for the singleton Boot object.
     * 
     * @param args the arguments with which main() was invoked
     * @param props the properties (created from the args)
     */
    private Boot(String[] args, Properties props)
    {
        this.args = args;
        this.commandLineProps = props;
    }


    /**
     * Retuns the args list passed to the starting program.
     *
     * @return    The args value
     */
    public String[] getArgs()
    {
        return args;
    }


    /**
     * Returns the home directory of the java we have been started with
     *
     * @return    The javaHome value
     */
    public File getJavaHome()
    {
        return javaHomeDir;
    }

    /**
     * Returns the BlueJ library directory.
     *
     * @return    The bluejLibDir value
     */
    public File getBluejLibDir()
    {
        return bluejLibDir;
    }


    /**
     * Return the path of the Junit library.
     * @return a File pointing to the local Junit library.
     */
    public File getJunitLib ()
    {
        File risul = new File(bluejLibDir, "junit.jar");

        if (!risul.canRead())
            throw new IllegalStateException("junit.jar is missing or unreadable");

        return risul;
    }

    /**
     * Returns the runtime classpath. This contains all the classes for BlueJ.
     *
     * @return    The runtimeClassPath value.
     */
    public URL[] getRuntimeClassPath()
    {
        return runtimeClassPath;
    }
    
    /**
     * Returns the runtime user classpath. This is available to code within BlueJ.
     *
     * @return    The runtimeUserClassPath value.
     */
    public URL[] getRuntimeUserClassPath()
    {
        return runtimeUserClassPath;
    }

    /**
     * Returns the boot class loader, the one that is used to load this class.
     *
     * @return The bootClassLoader value.
     */
    public ClassLoader getBootClassLoader ()
    {
        return bootLoader;
    }

    /**
     * Calculate the various path values, create a new classloader and
     * construct a bluej.Main. This needs to be outside the constructor to
     * ensure that the singleton instance is valid by the time
     * bluej.Main is run.
     */
    private void bootBluej()
    {
        initializeBoot();
        try {
            URLClassLoader runtimeLoader = new URLClassLoader(runtimeClassPath, bootLoader);
 
            // Construct a bluej.Main object. This starts BlueJ "proper".
            Class mainClass = Class.forName("bluej.Main", true, runtimeLoader);
            mainClass.newInstance();
            
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
    
    private void initializeBoot()
    {
        // Retrieve the current classLoader, this is the boot loader.
        bootLoader = getClass().getClassLoader();

        // Get the home directory of the Java implementation we're being run by
        javaHomeDir = new File(System.getProperty("java.home"));

        // Now work out what the BlueJ lib directory is.
        bluejLibDir = calculateBluejLibDir();

        try {
        	runtimeClassPath = getKnownJars(bluejLibDir, bluejJars, true);
        
        	runtimeUserClassPath = getKnownJars(bluejLibDir, bluejUserJars, false);
        }
        catch (Exception exc) {
            exc.printStackTrace();
        }
    }

    /**
     * Calculate the bluejLibDir value by doing some reasoning on a resource 
     * we know we have: the .class file for the Boot class.
     * For example:
     * bootUrl=jar:file:/C:/home/bluej/bluej/lib/bluej.jar!/bluej/Boot.class
     * bootFullName=file:/C:/home/bluej/bluej/lib/bluej.jar!/bluej/Boot.class
     * bootName=file:/C:/home/bluej/bluej/lib/bluej.jar
     * finalName=/C:/home/bluej/bluej/lib/bluej.jar
     * Parent=C:\home\bluej\bluej\lib
     *
     * @return    the path of the BlueJ lib directory
     */
	private File calculateBluejLibDir()
    {
        File bluejDir = null;
		String bootFullName = getClass().getResource("Boot.class").getFile();

		// Assuming the class is in a jar file, '!' separates the jar file name from the class name.		
		int classIndex = bootFullName.indexOf("!");
		String bootName = null;
		if (classIndex < 0) {
			// Boot.class is not in a jar-file. Find a lib directory somewhere
            // above us to use
            File startingDir = (new File(bootFullName).getParentFile());

            while((startingDir != null) &&
                   !(new File(startingDir.getParentFile(), "lib").isDirectory())) {
                        startingDir = startingDir.getParentFile();
            }
            
            if (startingDir == null)
                bluejDir = null;
            else
                bluejDir = new File(startingDir.getParentFile(), "lib");			
		} else {
			//It was in a jar. Cut of the class name
			bootName = bootFullName.substring(0, classIndex);
			bootName = getURLPath(bootName);

            File finalFile = new File(bootName);
            bluejDir = finalFile.getParentFile();
		}	
		
		return bluejDir;
	}



    /**
     * Return the path element of a URL, properly decoded - that is: replace 
     * each char encoded as "%xx" with its real character.
     */
    private String getURLPath(String url)
    {
        // Get rid of the initial "file:" string
        if (!url.startsWith("file:"))
            throw new IllegalStateException("Unexpected format of jar file URL (class Boot.java): " + url);
        url = url.substring(5);
//        return java.net.URLDecoder.decode(url);
        
        try {
            return java.net.URLDecoder.decode(url, "UTF-8");
        }
        catch(UnsupportedEncodingException exc) {
            return null;
        }
    }

    /**
     * Returns an array of URLs for all the required BlueJ jars
     *
     * @return  URLs of the required JAR files
     * @exception  MalformedURLException  for any problems with the URLs
     */
    private URL[] getKnownJars(File libDir, String[] jars, boolean isSystem) 
        throws MalformedURLException
    {
        boolean useClassesDir = commandLineProps.getProperty("useclassesdir", "false").equals("true");
        
        // by default, we require all our known jars to be present
        int startJar = 0;
        ArrayList urlList = new ArrayList();

        // a hack to let BlueJ run from within Eclipse.
        // If specified on command line, lets add a ../classes
        // directory to the classpath (where Eclipse stores the
        // .class files)
        if ((isSystem || isGreenfoot) && useClassesDir) {
            File classesDir = new File(libDir.getParentFile(), "classes");
            
            if (classesDir.isDirectory()) {
                urlList.add(classesDir.toURI().toURL());
                // skip over requiring bluejcore.jar, bluejeditor.jar etc.
                startJar = bluejBuildJars;
            }
        }

        for (int i=startJar; i < jars.length; i++) {
            File toAdd = new File(libDir, jars[i]);

            if (!toAdd.canRead())
                throw new IllegalStateException("required jar is missing or unreadable: " + toAdd);

            urlList.add(toAdd.toURI().toURL());
        }
    
        if (isSystem) {
            // We also need to add tools.jar on some systems
            URL toolsURL = getToolsURL();
            if(toolsURL != null)
                urlList.add(toolsURL);
        }
        return (URL[]) urlList.toArray(new URL[0]);
    }
    
    
    
    /**
     * Try to decide if this filename has the right extension to be a
     * library
     *
     * @param  aFile  the File to be checked
     * @return  true if the File could be library
     */
    private boolean hasValidExtension(File aFile)
    {
        if (aFile == null)
            return false;

        // If it ends in jar it is good.
        if (aFile.getName().endsWith(".jar"))
            return true;

        // if it ends in zip also
        if (aFile.getName().endsWith(".zip"))
            return true;

        return false;
    }


    /**
     * Get the URL of the  current tools.jar file
     * Looks for lib/tools.jar in the current javaHome
     * and in the parent of it.
     * tools.jar is needed on many (but not all!) systems. Currently, 
     * MacOS is the only system known to us without a tools URL, but 
     * there may be others in the furure. This method returns null
     * if tools.jar does not exist.
     *
     * @return   The URL of the tools.jar file for the current Java implementation, or null.
     * @exception  MalformedURLException  for any problems with the URL
     */
    private URL getToolsURL() 
        throws MalformedURLException
    {
        String osname = System.getProperty("os.name", "");
        if(osname.startsWith("Mac"))     // we know it does not exist on a Mac...
            return null;

        File toolsFile = new File(javaHomeDir, "lib/tools.jar");
        if (toolsFile.canRead())
            return toolsFile.toURI().toURL();

        File parentDir = javaHomeDir.getParentFile();
        toolsFile = new File(parentDir, "lib/tools.jar");
        if (toolsFile.canRead())
            return toolsFile.toURI().toURL();
        else {
            // on other systems where we don't find it, we just warn. We don't expect it
            // to happen, but you never know...
            System.err.println("class Boot: tools.jar not found. Potential problem for execution.");
            return null;
        }
    }
    
    /**
     * Analyse and process command line specified properties.
     * Properties can be specified with -... command line options. For example: -bluej.debug=true
     * 
     * @param args The command line parameters
     * @return The property object
     */
    private static Properties processCommandLineProperties(String[] args)
    {
        Properties props = new Properties();

        for(int i = 0; i < args.length; i++) {
            if (!args[i].startsWith("-"))
                continue;
            
            String definition = args[i].substring(1);
            int definitionEquals = definition.indexOf('=');
            
            if (definitionEquals < 0)
                continue;
            
            String propName = definition.substring(0, definitionEquals); 
            String propValue = definition.substring(definitionEquals+1);
            
            if (!propName.equals("") && !propValue.equals(""))
                props.put(propName, propValue);
        }
        return props;
    }

    /**
     * Returns command line specified properties. <br>
     * 
     * Properties can be specified with -... command line options. For example: -bluej.debug=true
     */
    public Properties getCommandLineProperties()
    {
        return commandLineProps;
    }
    
}
