// $ANTLR 2.7.0: "java.g" -> "JavaLexer.java"$

package bluej.parser;

public interface JavaLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SEMI = 4;
	int LITERAL_import = 5;
	int LBRACK = 6;
	int RBRACK = 7;
	int LITERAL_void = 8;
	int LITERAL_boolean = 9;
	int LITERAL_byte = 10;
	int LITERAL_char = 11;
	int LITERAL_short = 12;
	int LITERAL_int = 13;
	int LITERAL_float = 14;
	int LITERAL_long = 15;
	int LITERAL_double = 16;
	int IDENT = 17;
	int DOT = 18;
	int STAR = 19;
	int LITERAL_private = 20;
	int LITERAL_public = 21;
	int LITERAL_protected = 22;
	int LITERAL_static = 23;
	int LITERAL_transient = 24;
	int LITERAL_final = 25;
	int LITERAL_abstract = 26;
	int LITERAL_native = 27;
	int LITERAL_threadsafe = 28;
	int LITERAL_synchronized = 29;
	int LITERAL_const = 30;
	int LITERAL_class = 31;
	int LITERAL_interface = 32;
	int LCURLY = 33;
	int RCURLY = 34;
	int LITERAL_extends = 35;
	int COMMA = 36;
	int LITERAL_implements = 37;
	int ASSIGN = 38;
	int LPAREN = 39;
	int RPAREN = 40;
	int LITERAL_throws = 41;
	int COLON = 42;
	int LITERAL_if = 43;
	int LITERAL_else = 44;
	int LITERAL_for = 45;
	int LITERAL_while = 46;
	int LITERAL_do = 47;
	int LITERAL_break = 48;
	int LITERAL_continue = 49;
	int LITERAL_return = 50;
	int LITERAL_switch = 51;
	int LITERAL_case = 52;
	int LITERAL_default = 53;
	int LITERAL_throw = 54;
	int LITERAL_goto = 55;
	int LITERAL_try = 56;
	int LITERAL_finally = 57;
	int LITERAL_catch = 58;
	int PLUS_ASSIGN = 59;
	int MINUS_ASSIGN = 60;
	int STAR_ASSIGN = 61;
	int DIV_ASSIGN = 62;
	int MOD_ASSIGN = 63;
	int SR_ASSIGN = 64;
	int BSR_ASSIGN = 65;
	int SL_ASSIGN = 66;
	int BAND_ASSIGN = 67;
	int BXOR_ASSIGN = 68;
	int BOR_ASSIGN = 69;
	int QUESTION = 70;
	int LOR = 71;
	int LAND = 72;
	int BOR = 73;
	int BXOR = 74;
	int BAND = 75;
	int NOT_EQUAL = 76;
	int EQUAL = 77;
	int LT = 78;
	int GT = 79;
	int LE = 80;
	int GE = 81;
	int SL = 82;
	int SR = 83;
	int BSR = 84;
	int PLUS = 85;
	int MINUS = 86;
	int DIV = 87;
	int MOD = 88;
	int INC = 89;
	int DEC = 90;
	int BNOT = 91;
	int LNOT = 92;
	int LITERAL_instanceof = 93;
	int LITERAL_super = 94;
	int LITERAL_true = 95;
	int LITERAL_false = 96;
	int LITERAL_this = 97;
	int LITERAL_null = 98;
	int LITERAL_new = 99;
	int NUM_INT = 100;
	int CHAR_LITERAL = 101;
	int STRING_LITERAL = 102;
	int NUM_FLOAT = 103;
	int WS = 104;
	int SL_COMMENT = 105;
	int ML_COMMENT = 106;
	int ESC = 107;
	int DIGIT = 108;
	int VOCAB = 109;
	int LITERAL_package = 110;
	int LITERAL_volatile = 111;
	int HEX_DIGIT = 112;
	int EXPONENT = 113;
	int FLOAT_SUFFIX = 114;
}
