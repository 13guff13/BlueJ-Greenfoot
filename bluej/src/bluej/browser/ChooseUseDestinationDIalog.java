package bluej.browser;

import javax.swing.*;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Dimension;
import javax.swing.tree.TreePath;
import javax.swing.border.TitledBorder;
import java.util.Hashtable;

import java.awt.BorderLayout;
import java.awt.FlowLayout;

import bluej.pkgmgr.LibraryBrowserPkgMgrFrame;
import bluej.pkgmgr.Package;
import bluej.Config;

/**
 * A JDialog subclass for selecting which package to use a library package in.
 * 
 * @author $Author: mik $
 * @version $Id: ChooseUseDestinationDIalog.java 36 1999-04-27 04:04:54Z mik $
 */
public class ChooseUseDestinationDIalog extends JDialog implements ActionListener {
    private LibraryBrowserPkgMgrFrame searcher = null;
    private JButton ok = new JButton("Ok");
    private JButton cancel = new JButton("Cancel");
    private JList possibleDestinationsList = new JList();
    private Hashtable possibleDestinationFrames = null;
	private String packageToUse = null;
	private boolean isClass = false;
	
    // size of the dialog
    private static final Dimension SIZE = new Dimension(300, 200);
	
    /**
     * Create a new dialog.  Layout the dialog and setup event handlers.  The dialog
     * is initially invisible.  Call <code>display</code> to make it visible.
     * 
     * @param searcher LibraryBrowserPkgMgrFrame object to call when a result is chosen to view.
     * @param packageToUse given to the searcher when a result is chosen to view
     * @param isClass given to the searcher when a result is chosen to view
     */
    public ChooseUseDestinationDIalog(LibraryBrowserPkgMgrFrame searcher, String packageToUse, boolean isClass) {
	super(LibraryBrowserPkgMgrFrame.getFrame(), "Choose Destination", true);
		
	this.searcher = searcher;
	this.packageToUse = packageToUse;
	this.isClass = isClass;
		
	JPanel control = new JPanel();
	control.setLayout(new FlowLayout(FlowLayout.CENTER));
	control.add(ok);
	ok.addActionListener(this);
	control.add(cancel);
	cancel.addActionListener(this);

	getContentPane().setLayout(new BorderLayout(5, 5));
	getContentPane().add(possibleDestinationsList, BorderLayout.CENTER);
	getContentPane().add(new JLabel(Config.getString("browser.usepackage.dialog.text")), BorderLayout.NORTH);
	getContentPane().add(control, BorderLayout.SOUTH);
		
	addWindowListener(new WindowAdapter() {
	    public void windowClosing(WindowEvent we) {
		setVisible(false);
	    }
	});

	getContentPane().setSize(SIZE);
	setResizable(false);
	
	pack();
    }
	
		/**
		 * Set the list of results for the previous search.  Called by the class responsible
		 * for performing the search.
		 * 
		 * @param destinations an array of Package objects use as search results.
		 */
    public void setDestinations(Package[] destinations) {
	// remove old list in preparation for new list
	getContentPane().remove(possibleDestinationsList);
		
	// create array solely of frame titles for display in list
	String possibleDestinations[] = new String[destinations.length];
	possibleDestinationFrames = new Hashtable();
	for (int current = 0; current < destinations.length; current++) {
	    possibleDestinations[current] = destinations[current].getFrame().getTitle();
	    possibleDestinationFrames.put(destinations[current].getFrame().getTitle(), destinations[current]);
	}
		
	// create new list containing frame titles
	possibleDestinationsList = new JList(possibleDestinations);
		
	// add new list 
	getContentPane().add(possibleDestinationsList, BorderLayout.CENTER);
    }
	
		/**
		 * Return the minimum size of this component.
		 * 
		 * @return the minimum size of this component.
		 * @see getPreferredSize
		 */
    public Dimension getMinumumSize() {
	return SIZE;
    }
	
		/**
		 * Return the preferred size of this component.
		 * 
		 * @return the preferred size of this component.
		 */
    public Dimension getPreferredSize() {
	return SIZE;
    }

		/**
		 * Make the dialog visible.
		 */
    public void display() {
	setVisible(true);
    }
	
		/**
		 * Handle any ActionEvents generated by the dialog and not already.
		 * handled.
		 * 
		 * @param evt the ActionEvent that has occurred.
		 */
    public void actionPerformed(ActionEvent evt) {
	String cmd = evt.getActionCommand();
	if (cmd.equals(ok.getText())) {
	    // make sure something is selected in the list
	    if (possibleDestinationsList.getSelectedValue() == null)
		return;
	    String chosenDestination = possibleDestinationsList.getSelectedValue().toString();
	    Package chosenFrame = null;
	    // make sure what is selected is at least a valid string
	    if (chosenDestination != null) {
				// find frame with title matching selected one
		chosenFrame = (Package)this.possibleDestinationFrames.get(chosenDestination);
				// make sure the selected item matches an existing frame
		if (chosenFrame != null) {
			
		    // call method to use package in chosen frame using possibleDestinationFrames[current]
			searcher.usePackage(chosenFrame, packageToUse, isClass);
		}
	    }
	    setVisible(false);
	} else if (cmd.equals(cancel.getText())) {
	    setVisible(false);
	}
    }
}
