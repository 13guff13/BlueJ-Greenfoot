package bluej.browser;

import javax.swing.*;
import javax.swing.event.*;

import java.awt.event.*;
import java.awt.*;
import javax.swing.tree.TreePath;
import javax.swing.border.TitledBorder;

import bluej.pkgmgr.LibraryBrowserPkgMgrFrame;
import bluej.Config;
import bluej.utility.Utility;
import bluej.utility.DialogManager;

/**
 * A JDialog subclass for specifying a search on the set of libraries.
 * Search options include case-sensitivity and substring searches.  
 * Search results are displayed and functionality provided to choose
 * one element of the result set to view.  The actual searching process
 * is delegated to a LibraryBrowserPkgMgrFrame object.
 * 
 * @author $Author: mik $
 * @version $Id: FindLibraryDialog.java 269 1999-11-10 05:36:05Z mik $
 */
public class FindLibraryDialog extends JDialog 

    implements ActionListener, ListSelectionListener 
{
    private LibraryBrowserPkgMgrFrame searcher = null;
    private JButton focusResult = new JButton("Go to");
    private JButton ok = new JButton("Finished");
    private JList resultList = new JList();
    private JTextField libToSearch = new JTextField(30);
    private JButton startSearch = new JButton("Find");
    private JCheckBox caseSensitive = new JCheckBox("Ignore Case");
    private JCheckBox substringSearch = new JCheckBox("Match whole word");
    private TreePath[] foundItems = null;
    private JLabel searchCount = new JLabel();
	
    // size of the dialog
    private static final Dimension SIZE = new Dimension(400, 300);
	
	
    /**
     * Create a new dialog.  Layout the dialog and setup event handlers.  The dialog
     * is initially invisible.  Call <code>display</code> to make it visible.
     * 
     * @param searcher LibraryBrowserPkgMgrFrame object to call when a result is chosen to view.
     */
    public FindLibraryDialog(LibraryBrowserPkgMgrFrame searcher) 
    {
	super(LibraryBrowserPkgMgrFrame.getFrame(), "Find Library", true);
	
	this.searcher = searcher;
	this.getContentPane().setLayout(new BorderLayout());
	
	JPanel entry = new JPanel();
	entry.setLayout(new BorderLayout());
	entry.add(new JLabel("Library"), BorderLayout.WEST);
	entry.add(libToSearch, BorderLayout.CENTER);
	libToSearch.addActionListener(this);
	libToSearch.setActionCommand(startSearch.getText());
	entry.add(startSearch, BorderLayout.EAST);
	startSearch.addActionListener(this);
		
	this.getContentPane().add(entry, BorderLayout.NORTH);
	
	JPanel control = new JPanel();
	control.setLayout(new FlowLayout(FlowLayout.CENTER));
	control.add(ok);
	ok.addActionListener(this);
		
	getContentPane().add(control, BorderLayout.SOUTH);
		
	JPanel results = new JPanel();
	results.setLayout(new BorderLayout());
	JPanel optionPanel = new JPanel();
	optionPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
	optionPanel.add(caseSensitive);
	optionPanel.add(substringSearch);
	results.add(optionPanel, BorderLayout.NORTH);
	JPanel resultListPanel = new JPanel();
	resultListPanel.setBorder(new TitledBorder("Search results"));
	resultListPanel.setLayout(new BorderLayout());
	resultListPanel.add(resultList, BorderLayout.CENTER);
	resultList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
	JScrollPane scroller = new JScrollPane(resultList);
	resultList.addListSelectionListener(this);
	resultListPanel.add(scroller, BorderLayout.CENTER);
	results.add(resultListPanel, BorderLayout.CENTER);
	JPanel focusPanel = new JPanel();
	focusPanel.setLayout(new BorderLayout());
	focusPanel.add(focusResult, BorderLayout.EAST);
	focusResult.setEnabled(false);
	focusPanel.add(searchCount, BorderLayout.WEST);
	results.add(focusPanel, BorderLayout.SOUTH);
	focusResult.addActionListener(this);
	focusResult.setDefaultCapable(true);
		
	this.getContentPane().add(results, BorderLayout.CENTER);
	getRootPane().setDefaultButton(focusResult);

	addWindowListener(new WindowAdapter() {
	    public void windowClosing(WindowEvent we) {
		setVisible(false);
	    }
	});

	this.pack();
	setResizable(false);
    }
	
    /**
     * Return the minimum size of this component.
     * 
     * @return the minimum size of this component.
     * @see getPreferredSize
     */
    public Dimension getMinumumSize() 
    {
	return SIZE;
    }

    /**
     * Return the preferred size of this component.
     * 
     * @return the preferred size of this component.
     */
    public Dimension getPreferredSize() 
    {
	return SIZE;
    }

    /**
     * Make the dialog visible.
     */
    public void display() 
    {
	setVisible(true);
	libToSearch.requestFocus();
    }
	
    /**
     * Handle any ActionEvents generated by the dialog and not already.
     * handled.
     * 
     * @param evt the ActionEvent that has occurred.
     */
    public void actionPerformed(ActionEvent evt)
    {
	String cmd = evt.getActionCommand();
	if (cmd.equals(startSearch.getText())) {
	    foundItems = searcher.findAllLibrariesMatching(this.libToSearch.getText(), 
							   !caseSensitive.isSelected(), 
							   !substringSearch.isSelected());
	    if (foundItems != null) {
		this.resultList.setListData(foundItems);
		this.searchCount.setText("" + foundItems.length + " matches");
	    } else { 
		resultList.setListData(new java.util.Vector(1));
		searchCount.setText("no matches found for that search");
		focusResult.setEnabled(false);
	    }
	} else if (cmd.equals(ok.getText())) {
	    setVisible(false);
	} else if (cmd.equals(focusResult.getText())) {
	    TreePath chosenPackage = (TreePath)resultList.getSelectedValue();
	    if (chosenPackage != null)
		searcher.openPackage(chosenPackage);
	    else
		DialogManager.showError(searcher, "no-lib-selected");
	}
    }
	
    /**
     * Enable the "Go to" button only when there is an item selected
     * in the list.
     */
    public void valueChanged(ListSelectionEvent e) 
    { 
	if (resultList.isSelectionEmpty())
	    focusResult.setEnabled(false);
	else
	    focusResult.setEnabled(true);
    }
}
