apply plugin: 'java-library'
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'application'

dependencies {
    annotationProcessor project(':anns-threadchecker')
    compileOnly project(':anns-threadchecker')
    annotationProcessor project(':threadchecker')
    compileOnly project(':threadchecker')
    implementation project(':boot')

    implementation 'com.google.guava:guava:17.0'
    implementation 'com.googlecode.java-diff-utils:diffutils:1.2.1'
    implementation 'de.jangassen:nsmenufx:2.1.8'
    implementation 'io.github.classgraph:classgraph:4.8.90'
    implementation 'org.apache.httpcomponents:httpclient:4.1.1'
    implementation 'org.apache.httpcomponents:httpmime:4.1.1'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:4.9.0.201710071750-r'
    implementation 'org.fxmisc.wellbehaved:wellbehavedfx:0.3.3'    
    implementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    implementation 'org.junit.platform:junit-platform-launcher:1.5.2'
    implementation 'org.junit.vintage:junit-vintage-engine:5.5.2'
    implementation 'xom:xom:1.3.7'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        "-Xplugin:threadchecker.TCPlugin",
        // we use some private packages/classes currently:
        "--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED"]
}

repositories {
    mavenCentral()
}

javafx {
    version = "17.0.2"
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.swing', 'javafx.web']
}

task copyLibToBuild(type: Copy) {
    from 'lib'
    into new File(sourceSets.main.output.resourcesDir, 'lib')
}

task blueJCoreJar(type: Jar) {
    archiveFileName = "bluejcore.jar"
    from "build/classes/java/main"
    exclude "bluej/extensions2/**", "bluej/editor/**", "lang/**"
    destinationDirectory = new File(sourceSets.main.output.resourcesDir, 'lib')
}

blueJCoreJar.dependsOn compileJava

task runBlueJ(type: JavaExec) {
    group = 'application'
    classpath sourceSets.main.runtimeClasspath
    main = "bluej.Boot"
    args "-bluej.debug=true"
}

runBlueJ.dependsOn copyLibToBuild
runBlueJ.dependsOn blueJCoreJar

group = 'org.bluej'
description = 'bluej'
