<project name="greenfoot" default="dist" basedir=".">
	<description>
    	greenfoot build file
    </description>

	<!-- ********************************************** -->
	<!-- it should not be necessary to edit any properties to build -->

	<!-- user specific properties that are edited to match local build environment-->
	<property file="build.properties"/>

    <!-- Greenfoot Version Number -->
    <property name="greenfoot.version" value="1.1.0"/>
    <property name="greenfoot.apiversion" value="1.1.0"/>
    
	<!-- Location of the bluej lib dir -->
	<property name="bluej.lib.greenfoot"  location="${bluej.projectdir}/lib/greenfoot"/>
	<!-- Location of the where the greenfoot.jar should be placed-->
	<property name="bluej.extensions.lib"  location="${bluej.projectdir}/lib/extensions"/>
	<!-- The classpath to the bluej classes-->
	<path id="bluej.class.path">
		<pathelement location="${bluej.projectdir}/classes"/>
		<pathelement location="${bluej.projectdir}/boot/classes"/>
		<pathelement location="${bluej.projectdir}/lib/antlr.jar"/>
		<pathelement location="${bluej.projectdir}/lib/junit.jar"/>
		<pathelement location="${bluej.projectdir}/lib/MRJ141Stubs.jar"/>
	</path>
	<!-- The sourcepath to the bluej classes-->
	<path id="bluej.src.path">
		<pathelement location="${bluej.projectdir}/src"/>
		<pathelement location="${bluej.projectdir}/boot/src"/>
	</path>
	<!-- Location of the files packed by BlueJ dist target -->
	<property name="bluej.installer.jar"  location="${bluej.projectdir}/package/greenfoot-instaler.jar"/>
	<property name="bluej.dist.jar"  location="${bluej.projectdir}/package/greenfoot-dist.jar"/>
    <property name="bluej.dist.mac"  location="${bluej.projectdir}/package/greenfoot-instaler-mac.zip"/>

    

	<!-- Location of the source files for greenfoot -->
	<property name="src" location="src"/>

    <!-- Location of the source files for standalone greenfoot -->
    <property name="standalone.src" location="standalone/src"/>    

    <!-- Location of the build dir for standalone greenfoot -->
    <property name="standalone.build" location="standalone/classes"/>
    
	<!-- Location of the test source files for greenfoot -->
	<property name="test.src" location="test/src"/>
	<property name="test.report" value="test"/>
	<!-- Location of the image files for greenfoot -->
	<property name="images" location="images"/>

	<!-- Location where javadoc for the API classes will be stored. -->
	<property name="apidoc" location="apidoc"/>
	<!-- Location of the build-dir where the class files will be stored -->
	<property name="build" location="classes"/>
	<!-- Location of the packed files for distribution -->
	<property name="package" location="package"/>
	
	<!-- Files that are used in the skeleton project. These are the user-visible framework files   -->
	<patternset id="skeleton.files">
		<include name="greenfoot/World.*"/>
		<include name="greenfoot/Actor.*"/>
		<include name="images/greenfoot.png"/>
	</patternset>

	<!-- Files that are used in tutorial -->
	<fileset id="tutorial.files" dir="resources/tutorial/">
		<include name="**"/>
	</fileset>
	
	<!-- scenarios to be included in standard distribution -->
	<patternset id="distribution.scenarios">
		<exclude name="**/*.pkh" />
		<exclude name="**/.#*" />
		<exclude name="**/.cvsignore" />
		<exclude name="**/doc/" />
		<exclude name="**/__*" />
		<include name="ants/" />
		<include name="plane/" />
		<include name="lunarlander/" />
		<include name="turtleGraphics/" />
		<include name="wombats/" />
		<include name="wombats2/" />
	</patternset>

	<!-- To avoid duplicate classes when compiling scenarios we exclude the greenfoot classes here -->
	<patternset id="compile.scenarios">
		<patternset refid="distribution.scenarios"/>
		<exclude name="**/greenfoot/*" />
	</patternset>

	<!-- The classpath to the greenfoot classes (once they are build) -->
	<path id="greenfoot.class.path">
		<pathelement location="${build}"/>
	</path>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${bluej.extensions.lib}"/>
		<copy  todir="${build}">
			<fileset dir="${images}"/>
		</copy>
		<mkdir dir="${package}"/>
	</target>

	<target name="compile" depends="init" description="Compile the source and run rmic" >
		<!-- Compile the java code from ${src} into ${build} -->
		<javac  
                    executable="${build_java_home}/bin/javac" 
                    fork="yes"
                    srcdir="${src}" 
                    destdir="${build}" 
                    classpathref="bluej.class.path" 
                    debug="true">
                    <!--compilerarg line="-source 1.4"/-->
		</javac>
		<!-- Compile the RMI-classes -->
		<rmic base="${build}" includes="**/*Impl.class" excludes="bluej/**">
			<classpath>
				<path refid="bluej.class.path"/>
			</classpath>
		</rmic>
	</target>

	<target name="compile-test" depends="compile" description="Compile the test source" >
		<!-- Compile the java code from ${test.src} into ${build} -->
		<javac srcdir="${test.src}" destdir="${build}" classpathref="bluej.class.path" debug="true">
			<!-- compilerarg line="-source 1.4" / -->
		</javac>
	</target>

	<target name="test" depends="compile-test">
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<pathelement location="${build}" />
				<path refid="bluej.class.path" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${test.report}">
				<fileset dir="${test.src}">
					<include name="**/*Test*.java" />
					<exclude name="**/TestObject.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="compile-scenarios" depends="compile, skeleton" description="Compile the scenarios">
		<!-- Should first delete all class files in scenario, and the greenfoot dir (depend on clean-scenarios) -->
                
		<macrodef name="compile-scenario">
			<attribute name="scenario" />
			<sequential>
				<copy todir="scenarios/@{scenario}">
					<fileset dir="projects/skeletonProject">
						<include name="greenfoot/**" />
						<include name="images/**" />
					</fileset>
				</copy>		
				<javac srcdir="scenarios/@{scenario}" debug="true">
				    <classpath>
				      <path refid="greenfoot.class.path"/>
					  <path refid="bluej.class.path"/>
				    </classpath>
				</javac>
			</sequential>
		</macrodef>
		
		<compile-scenario scenario="ants" />
		<compile-scenario scenario="plane" />
		<compile-scenario scenario="lunarlander" />
		<compile-scenario scenario="turtleGraphics" />
		<compile-scenario scenario="wombats" />
		<compile-scenario scenario="wombats2" />
		
		<!-- Compile all the scenarios -->
		<!--
		<javac srcdir="scenarios" classpathref="greenfoot.class.path" debug="true">
			<patternset refid="compile.scenarios" />
			-->
			<!-- compilerarg line="-source 1.4 -target 1.4" / -->
		<!-- </javac> -->
		<!-- TODO copy skeleton/greenfoot to all scenarios. Might need a custom target. -->

	</target>

	<target name="ready-to-run" depends="update-images, compile, copy-imagelib, copy-projects" description="Builds everything so it is ready to run" >
		<!-- Put everything in ${build} into the the jar file-->
		<jar jarfile="${bluej.extensions.lib}/greenfoot.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="rmiextension.RMIExtension" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>
	</target>

	<target name="create-api-doc">
		<mkdir dir="${apidoc}"/>
		<javadoc destdir="${apidoc}"
	           Windowtitle="Greenfoot API"
		       Doctitle="Greenfoot API"
		       bottom="&lt;a href=http://www.greenfoot.org/&gt;Greenfoot homepage&lt;/a&gt;">

			<fileset dir="${src}" defaultexcludes="yes">
				<include name="greenfoot/Actor.java" />
				<include name="greenfoot/World.java" />
				<include name="greenfoot/GreenfootImage.java" />
				<include name="greenfoot/Greenfoot.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="skeleton" depends="compile"  description="Copy the framework files from the build-dir to the skeletonproject." >
		<copy todir="projects/skeletonProject">
			<fileset dir="${src}">
				<patternset refid="skeleton.files"/>
			</fileset>
			<fileset dir="${build}">
				<patternset refid="skeleton.files"/>
			</fileset>
		</copy>
		<mkdir dir="projects/skeletonProject/images"/>
		<copy file="resources/greenfoot-icon-16.png" tofile="projects/skeletonProject/images/greenfoot.png"/>
	</target>

	<target name="copy-projects" depends="skeleton"  description="Copies the projects skeletonProject and startupProject to bluej" >
		<copy todir="${bluej.lib.greenfoot}">
			<fileset dir="projects"/>
		</copy>
	</target>
	
	<target name="copy-scenarios" depends="compile-scenarios"  description="Copies the scenarios to bluej" >
		<copy todir="${bluej.projectdir}/package/scenarios">
			<fileset dir="scenarios">
				<patternset refid="distribution.scenarios"/>
			</fileset>
		</copy>
	</target>
	
	<target name="copy-tutorial" description="Copies the projects tutorial and tutorial project to BlueJ" >
		<copy todir="${bluej.projectdir}/package/tutorial">
			<fileset refid="tutorial.files"/>
		</copy>
	</target>

	<target name="copy-imagelib" description="Copies the images for the image library to bluej">
		<copy todir="${bluej.lib.greenfoot}/imagelib">
			<fileset dir="imagelib"/>
		</copy>
	</target>	
	
	<target name="update-images" description="Copies the images from the resource directory out into the various places where the images are required.">
		<!-- Installer image windows: greenfoot-install.bmp -->
		<copy file="resources/greenfoot-install.bmp" todir="${bluej.projectdir}/package"/>
		<!-- Installer image jar: greenfoot-install.png -->	
		<copy file="resources/greenfoot-install.png" todir="${bluej.projectdir}/package"/>				
		<!-- About image: greenfoot-about.png -->
		<copy file="resources/greenfoot-about.png" todir="images"/>		
		<!-- Splash image: greenfoot-splash.jpg -->
		<copy file="resources/greenfootsplash.jpg" todir="${bluej.projectdir}/boot/src/bluej"/>				
		<!-- Greenfoot icon for classes: greenfoot-16.png -->
		<copy file="resources/greenfoot-icon-16.png" tofile="imagelib/other/greenfoot.png"/>				
		<!-- Greenfoot icon for application: greenfoot-16.png -->
		<copy file="resources/greenfoot-icon-16.png" tofile="images/greenfoot.png"/>	
	    <!-- Greenfoot icon for application on the mac: greenfoot.icns -->
	    <copy file="resources/greenfoot.icns" todir="${bluej.projectdir}/package/macfiles/Greenfoot.app/Contents/Resources"/>		
	</target>		

	<target name="dist" depends="ready-to-run, clean-scenarios, copy-scenarios, copy-tutorial" description="Generate the distribution. Also runs the bluej.dist-greenfoot" >
		<!-- Run the BlueJ dist-->
		<ant dir="${bluej.projectdir}" target="dist-greenfoot" />

		<move file="${bluej.installer.jar}" tofile="${package}/greenfoot-installer-${greenfoot.version}.jar"/>
		<move file="${bluej.dist.jar}" tofile="${package}/greenfoot-dist-${greenfoot.version}.jar"/>
		<move file="${bluej.dist.mac}" tofile="${package}/Greenfoot-${greenfoot.version}.zip"/>
		
		<echo message="The greenfoot dist-jar (used to build windows installer)s is in ${package}/greenfoot-dist-${greenfoot.version}.jar"/>
		<echo message="The greenfoot jar-installer is in ${package}/greenfoot-installer-${greenfoot.version}.jar"/>
		<echo message="The greenfoot Mac-installer is in ${package}/Greenfoot-${greenfoot.version}.zip"/>
	</target>

	<target name="clean" description="clean up" >
		<delete >
			<fileset dir="projects/skeletonProject">
				<patternset refid="skeleton.files"/>
			</fileset>
		</delete>
		
		<!-- Installer image windows: greenfoot-install.bmp -->
		<delete file="${bluej.projectdir}/package/greenfoot-install.bmp"/>
		<!-- Installer image jar: greenfoot-install.png -->	
		<delete file="${bluej.projectdir}/package/greenfoot-install.png"/>				
		<!-- About image: greenfoot-about.png -->
		<delete file="images/greenfoot-about.png"/>		
		<!-- Splash image: greenfoot-splash.jpg -->
		<delete file="${bluej.projectdir}/boot/src/bluej/greenfootsplash.jpg"/>				
		<!-- Greenfoot icon for classes: greenfoot-16.png -->
		<delete file="imagelib/other/greenfoot.png"/>				
		<!-- Greenfoot icon for application: greenfoot-16.png -->
		<delete file="images/greenfoot.png"/>	
		
		<delete dir="${bluej.lib.greenfoot}"/>
    	<delete dir="${bluej.projectdir}/package/scenarios"/>
    	<delete dir="${build}"/>
        <delete >
        	<fileset dir="${bluej.extensions.lib}">
        		<exclude name=".cvsignore"/>
        	</fileset>
        </delete>
    	<delete dir="${package}/scenarios"/>        
    </target>
	
    
    
    <target name="run-greenfoot"  depends="ready-to-run">
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <path refid="bluej.class.path"/>
                <path refid="bluej.src.path"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
                <pathelement location="${build}"/>                
            </classpath>        
            
            <arg value="-bluej.debug=true"></arg>
            <arg value="-greenfoot=true"></arg>            
            <arg value="-useclassesdir=true"></arg>
        	<arg value="-greenfootclassesdir=${build}"/>
        	<arg value="-greenfoot.scenarios=${greenfoot.scenarios}"/>
        	<arg value="-greenfoot.tutorial=${greenfoot.tutorial}"/>
        	<arg value="-greenfoot.tutorial.scenario=${greenfoot.tutorial.scenario}"/>
        	<arg value="-bluej.compiler.showunchecked=false"/>        	
        </java>
    </target>
    
    <target name="run-scenario-viewer"  depends="ready-to-run,compile-scenarios">
        <!-- run the java code built into the jar files -->
        <java classname="greenfoot.util.GreenfootScenarioViewer" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <!--path refid="bluej.class.path"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/-->
                <pathelement location="${build}"/>
                <pathelement location="scenarios/asteroids/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                 <path refid="bluej.class.path"/>
                

            </classpath>        
            
        </java>
    </target>
    
    <target name="profile-scenario-viewer"  depends="ready-to-run,compile-scenarios">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

        <nbprofiledirect>
            <classpath>
                <pathelement location="${build}"/>
                <pathelement location="scenarios/ants/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                <path refid="bluej.class.path"/> 
            </classpath>
        </nbprofiledirect>
    
        <!-- run the java code built into the jar files -->
        <java classname="greenfoot.util.GreenfootScenarioViewer" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <pathelement location="${build}"/>
                <pathelement location="scenarios/ants/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                <path refid="bluej.class.path"/>
            </classpath>        
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>
    
    <target name="build-standalone-jar" depends="compile-standalone" description="Builds a jar file with all the classes and files needed for stand alone execution of Greenfoot projects.">
        <copy  todir="${standalone.build}">
            <fileset dir="${images}"/>
        </copy>
        <jar jarfile="standalone.jar" basedir="${standalone.build}">
            <manifest>
                <attribute name="Main-Class" value="greenfoot.util.GreenfootScenarioViewer" />
                <attribute name="Class-Path" value="." />
            </manifest>
        </jar>
    </target>
    
    <target name="compile-standalone" depends="init" description="Compile the source and run rmic" >
        <delete dir="${standalone.build}"/>
        <mkdir dir="${standalone.build}"/>  
        
        <!-- Stupid javac target can't specify to exclude files from a specific source path. Will just temporarily rename them-->
        <move file="${src}/greenfoot/core/WorldHandler.java" tofile="${src}/greenfoot/core/WorldHandler.javaTMP" preservelastmodified="true" overwrite="false" failonerror="false"/>
        <move file="${src}/greenfoot/util/GreenfootUtil.java" tofile="${src}/greenfoot/util/GreenfootUtil.javaTMP" preservelastmodified="true" overwrite="false" failonerror="false"/>
               
        <!-- Compile the java code from ${src} into ${build} -->
        <javac  
                    executable="${build_java_home}/bin/javac" 
                    fork="yes"
                    destdir="${standalone.build}" 

            classpathref="bluej.class.path" 
                    debug="true"
                    sourcepath=""            
            >
            <src path="${src}"/>
            <src path="${standalone.src}"/>
            
            <include name="greenfoot/core/WorldHandler.java"/>
            <include name="greenfoot/util/GreenfootUtil.java"/>

            <include name="greenfoot/**.java"/>
            <exclude name="greenfoot/ObjectTracker.java"/>
            <exclude name="greenfoot/ActorDelegateIDE.java"/>
            
            <include name="greenfoot/actions/PauseSimulationAction.java"/> 
            <include name="greenfoot/actions/RunSimulationAction.java"/> 
            <include name="greenfoot/actions/RunOnceSimulationAction.java"/> 
            
            <include name="greenfoot/collision/**/*.java"/>            

            <include name="greenfoot/core/KeyboardManager.java"/>
            <include name="greenfoot/core/LocationTracker.java"/>
            <include name="greenfoot/core/ProjectProperties.java"/>
            <include name="greenfoot/core/Simulation.java"/>        
            <include name="greenfoot/core/ObjectDragProxy.java"/>         

            <include name="greenfoot/event/SimulationEvent.java"/>
            <include name="greenfoot/event/SimulationListener.java"/> 
            <include name="greenfoot/event/WorldListener.java"/> 
            <include name="greenfoot/event/WorldEvent.java"/> 
            
            <include name="greenfoot/gui/ControlPanel.java"/>
            <include name="greenfoot/gui/DragGlassPane.java"/>
            <include name="greenfoot/gui/DragListener.java"/>
            <include name="greenfoot/gui/DropTarget.java"/>
            <include name="greenfoot/gui/WorldCanvas.java"/>            

            <include name="greenfoot/sound/**/*.java"/>

            <include name="greenfoot/util/**/*.java"/>
            
        </javac>
        <!-- Rename files back. This will not happen if compile fails :-( But if it fails it is assumed that the compile will be fixed, and then it should work again. -->
        <move file="${src}/greenfoot/core/WorldHandler.javaTMP" tofile="${src}/greenfoot/core/WorldHandler.java" preservelastmodified="true" overwrite="false"/>
        <move file="${src}/greenfoot/util/GreenfootUtil.javaTMP" tofile="${src}/greenfoot/util/GreenfootUtil.java" preservelastmodified="true" overwrite="false"/>
                 
    </target>
    
    <target name="clean-scenarios" description="clean up scenarios (remove doc and greenfoot dir)" >
        <delete includeemptydirs="true">
            <fileset dir="scenarios">
                <include name="**/*.class"/>
                <include name="**/doc/" />
                <include name="**/greenfoot/" />
                <include name="**/*.ctxt" />
            	<include name="**/images/greenfoot.png" />
            </fileset>
        </delete>
    	<!-- Remove size and location from project.greenfoot -->
		<replaceregexp byline="true">
    	    <regexp pattern="mainWindow.*"/>
    	    <substitution expression=""/>
    	    <fileset dir="scenarios" includes="**/project.greenfoot"/>
    	</replaceregexp>
    	<!-- Remove size and location from bluej.pkg -->
		<replaceregexp byline="true">
    	    <regexp pattern="package.editor.*"/>
    	    <substitution expression=""/>
    	    <fileset dir="scenarios" includes="**/bluej.pkg"/>
    	</replaceregexp>
    </target>
	
    <target name="update-version-number" description="updates the version number in all files where it appears" >
		<replaceregexp byline="true">
    	    <regexp pattern="@version .*"/>
    	    <substitution expression="@version ${greenfoot.apiversion}"/>
    	    <fileset dir="${src}/greenfoot" includes="Greenfoot.java,GreenfootImage.java,Actor.java,World.java"/>
    	</replaceregexp>
    	<replaceregexp byline="true">
    	    <regexp pattern="GREENFOOT_VERSION = .*"/>
    	    <substitution expression="GREENFOOT_VERSION = &quot;${greenfoot.version}&quot;;"/>
    	    <fileset dir="${bluej.projectdir}/boot/src/bluej" includes="Boot.java"/>
    	</replaceregexp>
    	<replaceregexp byline="true">
    	    <regexp pattern="GREENFOOT_API_VERSION = .*"/>
    	    <substitution expression="GREENFOOT_API_VERSION = &quot;${greenfoot.apiversion}&quot;;"/>
    	    <fileset dir="${bluej.projectdir}/boot/src/bluej" includes="Boot.java"/>
    	</replaceregexp>
    	<replaceregexp byline="true">
    	    <regexp pattern="version=.*"/>
    	    <substitution expression="version=${greenfoot.apiversion}"/>
    	    <fileset dir="projects/startupProject" includes="project.greenfoot"/>
    	</replaceregexp>
    </target>
</project>
