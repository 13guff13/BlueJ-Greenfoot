<project name="greenfoot" default="dist" basedir=".">
	<description>
    	greenfoot build file
    </description>

	<!-- ********************************************** -->
	<!-- it should not be necessary to edit any properties to build -->

	<!-- user specific properties that are edited to match local build environment-->
	<property file="build.properties"/>


	<!-- Location of the bluej lib dir -->
	<property name="bluej.lib"  location="${bluej.projectdir}/lib"/>
	<!-- Location of the where the greenfoot.jar should be placed-->
	<property name="bluej.extensions.lib"  location="${bluej.projectdir}/lib/extensions"/>
	<!-- The classpath to the bluej classes-->
	<path id="bluej.class.path">
		<pathelement location="${bluej.projectdir}/classes"/>
		<pathelement location="${bluej.projectdir}/boot/classes"/>
		<pathelement location="${bluej.projectdir}/lib/antlr.jar"/>
		<pathelement location="${bluej.projectdir}/lib/junit.jar"/>
		<pathelement location="${bluej.projectdir}/lib/MRJ141Stubs.jar"/>
	</path>
	<!-- The sourcepath to the bluej classes-->
	<path id="bluej.src.path">
		<pathelement location="${bluej.projectdir}/src"/>
		<pathelement location="${bluej.projectdir}/boot/src"/>
	</path>
	<!-- Location of the jar file packed by BlueJ dist target -->
	<property name="bluej.installer.jar"  location="${bluej.projectdir}/package/greenfoot-dist-new.jar"/>
	<property name="bluej.dist.jar"  location="${bluej.projectdir}/package/greenfoot-dist.jar"/>



	<!-- **** greenfoot related properties **** -->
	<!-- Location of the source files for greenfoot -->
	<property name="src" location="src"/>
	<!-- Location of the test source files for greenfoot -->
	<property name="test.src" location="test/src"/>
	<property name="test.report" value="test"/>
	<!-- Location of the image files for greenfoot -->
	<property name="images" location="images"/>

	<!-- Location where javadoc for the API classes will be stored. -->
	<property name="apidoc" location="apidoc"/>
	<!-- Location of the build-dir where the class files will be stored -->
	<property name="build" location="classes"/>
	<!-- Location of the packed files for distribution -->
	<property name="package" location="package"/>
	<!-- Files that are used in the skeleton project. These are the user-visible framework files   -->
	<patternset id="skeleton.files">
		<include name="greenfoot/World.*"/>
		<include name="greenfoot/Actor.*"/>
		<include name="images/greenfoot-logo.png"/>
	</patternset>

	<!-- scenarios to be included in standard distribution -->
	<patternset id="distribution.scenarios">
		<exclude name="**/*.pkh" />
		<exclude name="**/.#*" />
		<exclude name="**/.cvsignore" />
		<exclude name="**/doc/" />
		<exclude name="**/__*" />
		<include name="ants/" />
		<include name="boids/" />
		<include name="bricks/" />
		<include name="draughts/" />
		<include name="robots/" />
		<include name="shapes/" />
		<include name="turtleGraphics/" />
		<include name="wombats/" />
	</patternset>

	<!-- To avoid duplicate classes when compiling scenarios we exclude the greenfoot classes here -->
	<patternset id="compile.scenarios">
		<patternset refid="distribution.scenarios"/>
		<exclude name="**/greenfoot/*" />
	</patternset>

	<!-- The classpath to the greenfoot classes (once they are build) -->
	<path id="greenfoot.class.path">
		<pathelement location="${build}"/>
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${bluej.extensions.lib}"/>
		<copy  todir="${build}">
			<fileset dir="${images}"/>
		</copy>
		<mkdir dir="${package}"/>
	</target>

	<target name="compile" depends="init" description="Compile the source and run rmic" >
		<!-- Compile the java code from ${src} into ${build} -->
		<javac  
                    executable="${build_java_home}/bin/javac" 
                    fork="yes"
                    srcdir="${src}" 
                    destdir="${build}" 
                    classpathref="bluej.class.path" 
                    debug="true">
                    <!--compilerarg line="-source 1.4"/-->
		</javac>
		<!-- Compile the RMI-classes -->
		<rmic base="${build}" includes="**/*Impl.class" excludes="bluej/**">
			<classpath>
				<path refid="bluej.class.path"/>
			</classpath>
		</rmic>
	</target>

	<target name="compile-test" depends="compile" description="Compile the test source" >
		<!-- Compile the java code from ${test.src} into ${build} -->
		<javac srcdir="${test.src}" destdir="${build}" classpathref="bluej.class.path" debug="true">
			<!-- compilerarg line="-source 1.4" / -->
		</javac>
	</target>

	<target name="test" depends="compile-test">
		<junit printsummary="yes" haltonfailure="yes">
			<classpath>
				<pathelement location="${build}" />
				<path refid="bluej.class.path" />
			</classpath>

			<formatter type="plain" />

			<batchtest fork="yes" todir="${test.report}">
				<fileset dir="${test.src}">
					<include name="**/*Test*.java" />
					<exclude name="**/TestObject.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="compile-scenarios" depends="compile, skeleton" description="Compile the scenarios">
		<!-- Should first delete all class files in scenario, and the greenfoot dir (depend on clean-scenarios) -->
                
		<macrodef name="compile-scenario">
			<attribute name="scenario" />
			<sequential>
				<copy todir="scenarios/@{scenario}">
					<fileset dir="projects/skeletonProject">
						<include name="greenfoot/**" />
						<include name="images/**" />
					</fileset>
				</copy>		
				<javac srcdir="scenarios/@{scenario}" debug="true">
				    <classpath>
				      <path refid="greenfoot.class.path"/>
					  <path refid="bluej.class.path"/>
				    </classpath>
				</javac>
			</sequential>
		</macrodef>
		
		<compile-scenario scenario="ants" />
		<compile-scenario scenario="boids" />
		<compile-scenario scenario="bricks" />
		<compile-scenario scenario="draughts" />
		<compile-scenario scenario="robots" />
		<compile-scenario scenario="shapes" />
		<compile-scenario scenario="turtleGraphics" />
		<compile-scenario scenario="wombats" />
		
		<!-- Compile all the scenarios -->
		<!--
		<javac srcdir="scenarios" classpathref="greenfoot.class.path" debug="true">
			<patternset refid="compile.scenarios" />
			-->
			<!-- compilerarg line="-source 1.4 -target 1.4" / -->
		<!-- </javac> -->
		<!-- TODO copy skeleton/greenfoot to all scenarios. Might need a custom target. -->

	</target>

	<target name="ready-to-run" depends="compile, copy-imagelib" description="Builds everything so it is ready to run" >
		<!-- Put everything in ${build} into the the jar file-->
		<jar jarfile="${bluej.extensions.lib}/greenfoot.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="rmiextension.RMIExtension" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>
	</target>

	<target name="create-api-doc">
		<mkdir dir="${apidoc}"/>
		<javadoc destdir="${apidoc}"
	           Windowtitle="Greenfoot API"
		       Doctitle="Greenfoot API"
		       bottom="&lt;a href=http://www.greenfoot.org/&gt;Greenfoot homepage&lt;/a&gt;">

			<fileset dir="${src}" defaultexcludes="yes">
				<include name="greenfoot/Actor.java" />
				<include name="greenfoot/World.java" />
				<include name="greenfoot/GreenfootImage.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="skeleton" depends="compile"  description="Copy the framework files from the build-dir to the skeletonproject." >
		<copy todir="projects/skeletonProject">
			<fileset dir="${src}">
				<patternset refid="skeleton.files"/>
			</fileset>
			<fileset dir="${build}">
				<patternset refid="skeleton.files"/>
			</fileset>
		</copy>
	</target>

	<target name="copy-projects" depends="skeleton, compile-scenarios"  description="Copies the projects skeletonProject, startupProject and scenarios to bluej" >
		<copy todir="${bluej.lib}">
			<fileset dir="projects"/>
		</copy>
		<copy todir="${bluej.projectdir}/package/scenarios">
			<fileset dir="scenarios">
				<patternset refid="distribution.scenarios"/>
			</fileset>
		</copy>
	</target>

	<target name="copy-imagelib" description="Copies the images for the image library to bluej">
		<copy todir="${bluej.lib}/imagelib">
			<fileset dir="imagelib"/>
		</copy>
	</target>		

	<target name="dist" depends="ready-to-run, copy-projects" description="Generate the distribution. Also runs the bluej.dist-greenfoot" >
		<!-- Run the BlueJ dist-->
		<ant dir="${bluej.projectdir}" target="dist-greenfoot" />

		<move file="${bluej.installer.jar}" tofile="${package}/greenfoot-installer.jar"/>
		<move file="${bluej.dist.jar}" tofile="${package}/greenfoot-dist.jar"/>

		<echo message="The greenfoot dist-jar (used to build windows installer)s is in ${package}/greenfoot-dist.jar"/>
		<echo message="The greenfoot installer is in ${package}/greenfoot-installer.jar"/>
	</target>

	<target name="clean" description="clean up" >
		<delete >
			<fileset dir="projects/skeletonProject">
				<patternset refid="skeleton.files"/>
			</fileset>
		</delete>
		<delete dir="${bluej.lib}/skeletonProject"/>
		<delete dir="${bluej.lib}/startupProject"/>
		<delete dir="${bluej.lib}/imagelib"/>
    	<delete dir="${bluej.projectdir}/package/scenarios"/>
    	<delete dir="${build}"/>
        <delete >
        	<fileset dir="${bluej.extensions.lib}">
        		<exclude name=".cvsignore"/>
        	</fileset>
        </delete>
    	<delete dir="${package}/scenarios"/>        
    </target>
	
    
    
    <target name="run-greenfoot"  depends="ready-to-run">
        <!-- run the java code built into the jar files -->
        <java classname="bluej.Boot" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <path refid="bluej.class.path"/>
                <path refid="bluej.src.path"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/>
                <pathelement location="${build}"/>                
            </classpath>        
            
            <arg value="-bluej.debug=true"></arg>
            <arg value="-greenfoot=true"></arg>            
            <arg value="-useclassesdir=true"></arg>
        </java>
    </target>
    
    <target name="run-scenario-viewer"  depends="ready-to-run,compile-scenarios">
        <!-- run the java code built into the jar files -->
        <java classname="greenfoot.util.GreenfootScenarioViewer" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <!--path refid="bluej.class.path"/>
                <pathelement location="${build_java_home}/lib/tools.jar"/>
                <pathelement location="/System/Library/Java"/-->
                <pathelement location="${build}"/>
                <pathelement location="scenarios/ants/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                 <path refid="bluej.class.path"/>
                

            </classpath>        
            
        </java>
    </target>
    
    <target name="profile-scenario-viewer"  depends="ready-to-run,compile-scenarios">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

        <nbprofiledirect>
            <classpath>
                <pathelement location="${build}"/>
                <pathelement location="scenarios/ants/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                <path refid="bluej.class.path"/> 
            </classpath>
        </nbprofiledirect>
    
        <!-- run the java code built into the jar files -->
        <java classname="greenfoot.util.GreenfootScenarioViewer" fork="yes" jvm="${build_java_home}/bin/java">        
            <classpath>
                <pathelement location="${build}"/>
                <pathelement location="scenarios/ants/"/>
                <fileset dir="scenarios">
                    <patternset refid="compile.scenarios" />
                </fileset>
                <path refid="bluej.class.path"/>
            </classpath>        
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>
    
    <target name="clean-scenarios" description="clean up scenarios (remove doc and greenfoot dir)" >
        <delete includeemptydirs="true">
            <fileset dir="scenarios">
                <include name="**/*.class"/>
                <include name="**/doc/" />
                <include name="**/greenfoot/" />
                <include name="**/*.ctxt" />
            </fileset>
        </delete>
    </target>
</project>
